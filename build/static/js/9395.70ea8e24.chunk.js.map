{"version":3,"file":"static/js/9395.70ea8e24.chunk.js","mappings":"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","sources":["views/application/kanban/Backlogs/AlertStoryDelete.js","views/application/kanban/Backlogs/AddStoryComment.js","views/application/kanban/Backlogs/StoryComment.js","views/application/kanban/Backlogs/EditStory.js","views/application/kanban/Board/AlertItemDelete.js","views/application/kanban/Board/ItemAttachments.js","views/application/kanban/Board/ItemComment.js","views/application/kanban/Board/EditItem.js","views/application/kanban/Board/AddItemComment.js","views/application/kanban/Board/ItemDetails.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\r\n\r\n// ==============================|| KANBAN BACKLOGS - STORY DELETE ||============================== //\r\n\r\nexport default function AlertStoryDelete({ title, open, handleClose }) {\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={() => handleClose(false)}\r\n            keepMounted\r\n            maxWidth=\"xs\"\r\n            aria-labelledby=\"item-delete-title\"\r\n            aria-describedby=\"item-delete-description\"\r\n        >\r\n            {open && (\r\n                <>\r\n                    <DialogTitle id=\"item-delete-title\">{title} - Are you sure you want to delete?</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"item-delete-description\">\r\n                            By deleting user story, all task inside that user story will also be deleted.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions sx={{ mr: 2 }}>\r\n                        <Button onClick={() => handleClose(false)} color=\"error\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"contained\" size=\"small\" onClick={() => handleClose(true)} autoFocus>\r\n                            Delete\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>\r\n            )}\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nAlertStoryDelete.propTypes = {\r\n    open: PropTypes.bool,\r\n    handleClose: PropTypes.func,\r\n    title: PropTypes.string\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Button, Grid, TextField } from '@mui/material';\r\n\r\n// project imports\r\nimport { useDispatch, useSelector } from 'store';\r\nimport useConfig from 'hooks/useConfig';\r\nimport { addStoryComment } from 'store/slices/kanban';\r\n\r\n// third-party\r\nimport { Chance } from 'chance';\r\n\r\n// assets\r\nimport AttachFileTwoToneIcon from '@mui/icons-material/AttachFileTwoTone';\r\nimport AddToDriveTwoToneIcon from '@mui/icons-material/AddToDriveTwoTone';\r\nimport AddPhotoAlternateTwoToneIcon from '@mui/icons-material/AddPhotoAlternateTwoTone';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\n\r\nconst chance = new Chance();\r\n\r\n// ==============================|| KANBAN BACKLOGS - ADD STORY COMMENT ||============================== //\r\n\r\nconst AddStoryComment = ({ storyId }) => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const { borderRadius } = useConfig();\r\n    const { comments, userStory } = useSelector((state) => state.kanban);\r\n\r\n    const [comment, setComment] = useState('');\r\n    const [isComment, setIsComment] = useState(false);\r\n\r\n    const addNewStoryComment = () => {\r\n        if (comment.length > 0) {\r\n            const newComment = {\r\n                id: `${chance.integer({ min: 1000, max: 9999 })}`,\r\n                comment,\r\n                profileId: 'profile-1'\r\n            };\r\n\r\n            dispatch(addStoryComment(storyId, newComment, comments, userStory));\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Comment Add successfully',\r\n                    anchorOrigin: { vertical: 'top', horizontal: 'right' },\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n            setComment('');\r\n        } else {\r\n            setIsComment(true);\r\n        }\r\n    };\r\n\r\n    const handleAddStoryComment = (event) => {\r\n        if (event.key === 'Enter' || event.keyCode === 13) {\r\n            addNewStoryComment();\r\n        }\r\n    };\r\n\r\n    const handleStoryComment = (event) => {\r\n        const newComment = event.target.value;\r\n        setComment(newComment);\r\n        if (newComment.length <= 0) {\r\n            setIsComment(true);\r\n        } else {\r\n            setIsComment(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                p: 2.5,\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.primary[200] + 75,\r\n                borderRadius: `${borderRadius}px`\r\n            }}\r\n        >\r\n            <Grid container alignItems=\"center\" spacing={0.5}>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        placeholder=\"Add Comment\"\r\n                        value={comment}\r\n                        onChange={handleStoryComment}\r\n                        sx={{\r\n                            mb: 2,\r\n                            '& input': { bgcolor: 'transparent', p: 0, borderRadius: '0px' },\r\n                            '& fieldset': { display: 'none' },\r\n                            '& .MuiFormHelperText-root': {\r\n                                ml: 0\r\n                            },\r\n                            '& .MuiOutlinedInput-root': {\r\n                                bgcolor: 'transparent'\r\n                            }\r\n                        }}\r\n                        onKeyUp={handleAddStoryComment}\r\n                        helperText={isComment ? 'Comment is required.' : ''}\r\n                        error={isComment}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"text\" color=\"primary\" sx={{ p: 0.5, minWidth: 32 }} aria-label=\"add photo\">\r\n                        <AddPhotoAlternateTwoToneIcon />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"text\" color=\"primary\" sx={{ p: 0.5, minWidth: 32 }} aria-label=\"add file attachment\">\r\n                        <AttachFileTwoToneIcon />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"text\" color=\"primary\" sx={{ p: 0.5, minWidth: 32 }} aria-label=\"add file or any item to google drive\">\r\n                        <AddToDriveTwoToneIcon />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs zeroMinWidth />\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={addNewStoryComment}>\r\n                        Comment\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nAddStoryComment.propTypes = {\r\n    storyId: PropTypes.string\r\n};\r\n\r\nexport default AddStoryComment;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\n// assets\r\nimport FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';\r\n\r\nconst avatarImage = require.context('assets/images/users', true);\r\n\r\n// ==============================|| KANBAN BACKLOGS - STORY COMMENT ||============================== //\r\n\r\nconst StoryComment = ({ comment, profile }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50],\r\n                p: 1.5,\r\n                mt: 1.25\r\n            }}\r\n        >\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                    <Grid container wrap=\"nowrap\" alignItems=\"center\" spacing={1}>\r\n                        <Grid item>\r\n                            <Avatar\r\n                                sx={{ width: 24, height: 24 }}\r\n                                size=\"sm\"\r\n                                alt=\"User 1\"\r\n                                src={profile && profile.avatar && avatarImage(`./${profile.avatar}`)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <Grid container alignItems=\"center\" spacing={1}>\r\n                                <Grid item>\r\n                                    <Typography align=\"left\" variant=\"h5\" component=\"div\">\r\n                                        {profile.name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography align=\"left\" variant=\"caption\">\r\n                                        <FiberManualRecordIcon sx={{ width: 10, height: 10, opacity: 0.5, my: 0, mx: 0.625 }} />\r\n                                        {profile.time}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ '&.MuiGrid-root': { pt: 1.5 } }}>\r\n                    <Typography align=\"left\" variant=\"body2\">\r\n                        {comment?.comment}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n\r\nStoryComment.propTypes = {\r\n    comment: PropTypes.object,\r\n    profile: PropTypes.object\r\n};\r\n\r\nexport default StoryComment;\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    Divider,\r\n    Drawer,\r\n    Grid,\r\n    Typography,\r\n    Autocomplete,\r\n    FormControl,\r\n    FormControlLabel,\r\n    MenuItem,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    Stack,\r\n    TextField\r\n} from '@mui/material';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\r\n\r\n// third party\r\nimport * as yup from 'yup';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { useFormik } from 'formik';\r\n\r\n// project imports\r\nimport ItemAttachments from '../Board/ItemAttachments';\r\nimport AddStoryComment from './AddStoryComment';\r\nimport StoryComment from './StoryComment';\r\nimport AlertStoryDelete from './AlertStoryDelete';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { editStory, deleteStory } from 'store/slices/kanban';\r\n\r\n// assets\r\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\n\r\nconst avatarImage = require.context('assets/images/users', true);\r\nconst validationSchema = yup.object({\r\n    title: yup.string().required('User story title is required'),\r\n    dueDate: yup.date()\r\n});\r\n\r\n// ==============================|| KANBAN BACKLOGS - EDIT STORY ||============================== //\r\n\r\nconst EditStory = ({ story, open, handleDrawerOpen }) => {\r\n    const dispatch = useDispatch();\r\n    const kanban = useSelector((state) => state.kanban);\r\n    const { profiles, columns, comments, userStory, userStoryOrder } = kanban;\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            id: story.id,\r\n            title: story.title,\r\n            assign: story.assign,\r\n            columnId: story.columnId,\r\n            priority: story.priority,\r\n            dueDate: story.dueDate ? new Date(story.dueDate) : new Date(),\r\n            acceptance: story.acceptance,\r\n            description: story.description,\r\n            commentIds: story.commentIds,\r\n            image: false,\r\n            itemIds: story.itemIds\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            dispatch(editStory(values, userStory));\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n            handleDrawerOpen();\r\n        }\r\n    });\r\n\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const handleModalClose = (status) => {\r\n        setOpenModal(false);\r\n        if (status) {\r\n            handleDrawerOpen();\r\n            dispatch(deleteStory(story.id, userStory, userStoryOrder));\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Story Deleted successfully',\r\n                    anchorOrigin: { vertical: 'top', horizontal: 'right' },\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            sx={{\r\n                ml: open ? 3 : 0,\r\n                flexShrink: 0,\r\n                zIndex: 1200,\r\n                overflowX: 'hidden',\r\n                width: { xs: 320, md: 450 },\r\n                '& .MuiDrawer-paper': {\r\n                    height: '100vh',\r\n                    width: { xs: 320, md: 450 },\r\n                    position: 'fixed',\r\n                    border: 'none',\r\n                    borderRadius: '0px'\r\n                }\r\n            }}\r\n            variant=\"temporary\"\r\n            anchor=\"right\"\r\n            open={open}\r\n            ModalProps={{ keepMounted: true }}\r\n            onClose={() => {\r\n                handleDrawerOpen();\r\n                formik.resetForm();\r\n            }}\r\n        >\r\n            {open && (\r\n                <>\r\n                    <Box sx={{ p: 3 }}>\r\n                        <Grid container alignItems=\"center\" spacing={0.5} justifyContent=\"space-between\">\r\n                            <Grid item sx={{ width: 'calc(100% - 50px)' }}>\r\n                                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\r\n                                    <Button\r\n                                        variant=\"text\"\r\n                                        color=\"error\"\r\n                                        sx={{ p: 0.5, minWidth: 32, display: { xs: 'block', md: 'none' } }}\r\n                                        onClick={handleDrawerOpen}\r\n                                    >\r\n                                        <HighlightOffIcon />\r\n                                    </Button>\r\n                                    <Typography\r\n                                        variant=\"h4\"\r\n                                        sx={{\r\n                                            display: 'inline-block',\r\n                                            width: 'calc(100% - 34px)',\r\n                                            textOverflow: 'ellipsis',\r\n                                            whiteSpace: 'nowrap',\r\n                                            overflow: 'hidden',\r\n                                            verticalAlign: 'middle'\r\n                                        }}\r\n                                    >\r\n                                        {story.title}\r\n                                    </Typography>\r\n                                </Stack>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    aria-label=\"Delete\"\r\n                                    color=\"error\"\r\n                                    sx={{ p: 0.5, minWidth: 32 }}\r\n                                    onClick={() => setOpenModal(true)}\r\n                                >\r\n                                    <DeleteTwoToneIcon />\r\n                                </Button>\r\n                                {openModal && <AlertStoryDelete title={story.title} open={openModal} handleClose={handleModalClose} />}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                    <Divider />\r\n                    <PerfectScrollbar component=\"div\">\r\n                        <Box sx={{ p: 3 }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <form onSubmit={formik.handleSubmit}>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                            <Grid container spacing={3}>\r\n                                                <Grid item xs={12}>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        id=\"title\"\r\n                                                        name=\"title\"\r\n                                                        label=\"Title\"\r\n                                                        value={formik.values.title}\r\n                                                        onChange={formik.handleChange}\r\n                                                        error={formik.touched.title && Boolean(formik.errors.title)}\r\n                                                        helperText={formik.touched.title && formik.errors.title}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container alignItems=\"center\" spacing={2}>\r\n                                                        <Grid item xs={12} sm={4}>\r\n                                                            <Typography variant=\"subtitle1\">Assign to:</Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12} sm={8}>\r\n                                                            <Grid container justifyContent=\"flex-start\">\r\n                                                                <Autocomplete\r\n                                                                    id=\"assign\"\r\n                                                                    value={\r\n                                                                        profiles.find((profile) => profile.id === formik.values.assign) ||\r\n                                                                        null\r\n                                                                    }\r\n                                                                    onChange={(event, value) => formik.setFieldValue('assign', value?.id)}\r\n                                                                    options={profiles}\r\n                                                                    fullWidth\r\n                                                                    autoHighlight\r\n                                                                    getOptionLabel={(option) => option.name}\r\n                                                                    isOptionEqualToValue={(option) => option.id === formik.values.assign}\r\n                                                                    renderOption={(props, option) => (\r\n                                                                        <Box\r\n                                                                            component=\"li\"\r\n                                                                            sx={{ '& > img': { mr: 2, flexShrink: 0 } }}\r\n                                                                            {...props}\r\n                                                                        >\r\n                                                                            <img\r\n                                                                                loading=\"lazy\"\r\n                                                                                width=\"20\"\r\n                                                                                src={avatarImage(`./${option.avatar}`)}\r\n                                                                                alt=\"\"\r\n                                                                            />\r\n                                                                            {option.name}\r\n                                                                        </Box>\r\n                                                                    )}\r\n                                                                    renderInput={(params) => (\r\n                                                                        <TextField\r\n                                                                            {...params}\r\n                                                                            label=\"Choose a assignee\"\r\n                                                                            inputProps={{\r\n                                                                                ...params.inputProps,\r\n                                                                                autoComplete: 'new-password' // disable autocomplete and autofill\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    )}\r\n                                                                />\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container alignItems=\"center\" spacing={2}>\r\n                                                        <Grid item xs={12} sm={4}>\r\n                                                            <Typography variant=\"subtitle1\">Prioritize:</Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12} sm={8}>\r\n                                                            <FormControl>\r\n                                                                <RadioGroup\r\n                                                                    row\r\n                                                                    aria-label=\"color\"\r\n                                                                    value={formik.values.priority}\r\n                                                                    onChange={formik.handleChange}\r\n                                                                    name=\"priority\"\r\n                                                                    id=\"priority\"\r\n                                                                >\r\n                                                                    <FormControlLabel\r\n                                                                        value=\"low\"\r\n                                                                        control={<Radio color=\"primary\" sx={{ color: 'primary.main' }} />}\r\n                                                                        label=\"Low\"\r\n                                                                    />\r\n                                                                    <FormControlLabel\r\n                                                                        value=\"medium\"\r\n                                                                        control={<Radio color=\"warning\" sx={{ color: 'warning.main' }} />}\r\n                                                                        label=\"Medium\"\r\n                                                                    />\r\n                                                                    <FormControlLabel\r\n                                                                        value=\"high\"\r\n                                                                        control={<Radio color=\"error\" sx={{ color: 'error.main' }} />}\r\n                                                                        label=\"High\"\r\n                                                                    />\r\n                                                                </RadioGroup>\r\n                                                            </FormControl>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container alignItems=\"center\" spacing={2}>\r\n                                                        <Grid item xs={12} sm={4}>\r\n                                                            <Typography variant=\"subtitle1\">Due date:</Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12} sm={8}>\r\n                                                            <DesktopDatePicker\r\n                                                                label=\"Due Date\"\r\n                                                                value={formik.values.dueDate}\r\n                                                                format=\"dd/MM/yyyy\"\r\n                                                                onChange={(date) => {\r\n                                                                    formik.setFieldValue('dueDate', date);\r\n                                                                }}\r\n                                                                slotProps={{ textField: { fullWidth: true } }}\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container alignItems=\"center\" spacing={2}>\r\n                                                        <Grid item xs={12} sm={4}>\r\n                                                            <Typography variant=\"subtitle1\">Acceptance:</Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12} sm={8}>\r\n                                                            <TextField\r\n                                                                fullWidth\r\n                                                                id=\"acceptance\"\r\n                                                                name=\"acceptance\"\r\n                                                                multiline\r\n                                                                rows={3}\r\n                                                                value={formik.values.acceptance}\r\n                                                                onChange={formik.handleChange}\r\n                                                                error={formik.touched.acceptance && Boolean(formik.errors.acceptance)}\r\n                                                                helperText={formik.touched.acceptance && formik.errors.acceptance}\r\n                                                                placeholder=\"Enter Your Message\"\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container alignItems=\"center\" spacing={2}>\r\n                                                        <Grid item xs={12} sm={4}>\r\n                                                            <Typography variant=\"subtitle1\">Description:</Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12} sm={8}>\r\n                                                            <TextField\r\n                                                                fullWidth\r\n                                                                id=\"description\"\r\n                                                                name=\"description\"\r\n                                                                multiline\r\n                                                                rows={3}\r\n                                                                value={formik.values.description}\r\n                                                                onChange={formik.handleChange}\r\n                                                                error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                                                helperText={formik.touched.description && formik.errors.description}\r\n                                                                placeholder=\"Enter Your Message\"\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container alignItems=\"center\" spacing={2}>\r\n                                                        <Grid item xs={12} sm={4}>\r\n                                                            <Typography variant=\"subtitle1\">State:</Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12} sm={8}>\r\n                                                            <FormControl fullWidth>\r\n                                                                <Select\r\n                                                                    id=\"columnId\"\r\n                                                                    name=\"columnId\"\r\n                                                                    displayEmpty\r\n                                                                    value={formik.values.columnId}\r\n                                                                    onChange={formik.handleChange}\r\n                                                                    inputProps={{ 'aria-label': 'Without label' }}\r\n                                                                >\r\n                                                                    {columns.map((column, index) => (\r\n                                                                        <MenuItem key={index} value={column.id}>\r\n                                                                            {column.title}\r\n                                                                        </MenuItem>\r\n                                                                    ))}\r\n                                                                </Select>\r\n                                                            </FormControl>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Grid container alignItems=\"center\" spacing={2}>\r\n                                                        <Grid item xs={12} sm={4}>\r\n                                                            <Typography variant=\"subtitle1\">Attachments:</Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12} sm={8}>\r\n                                                            <ItemAttachments attachments={[]} />\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12}>\r\n                                                    <AnimateButton>\r\n                                                        <Button fullWidth variant=\"contained\" type=\"submit\">\r\n                                                            Save\r\n                                                        </Button>\r\n                                                    </AnimateButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </LocalizationProvider>\r\n                                    </form>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    {story?.commentIds &&\r\n                                        [...story.commentIds].reverse().map((commentId, index) => {\r\n                                            const commentData = comments.filter((comment) => comment.id === commentId)[0];\r\n                                            const profile = profiles.filter((item) => item.id === commentData.profileId)[0];\r\n                                            return <StoryComment key={index} comment={commentData} profile={profile} />;\r\n                                        })}\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <AddStoryComment storyId={story.id} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </PerfectScrollbar>\r\n                </>\r\n            )}\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nEditStory.propTypes = {\r\n    open: PropTypes.bool,\r\n    handleDrawerOpen: PropTypes.func,\r\n    story: PropTypes.object\r\n};\r\n\r\nexport default EditStory;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Button, Dialog, DialogActions, DialogTitle } from '@mui/material';\r\n\r\n// ==============================|| KANBAN BOARD - ITEM DELETE ||============================== //\r\n\r\nexport default function AlertItemDelete({ title, open, handleClose }) {\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={() => handleClose(false)}\r\n            keepMounted\r\n            maxWidth=\"xs\"\r\n            aria-labelledby=\"item-delete-title\"\r\n            aria-describedby=\"item-delete-description\"\r\n        >\r\n            {open && (\r\n                <>\r\n                    <DialogTitle id=\"item-delete-title\">{title} - Are you sure you want to delete this item?</DialogTitle>\r\n                    <DialogActions sx={{ mr: 2 }}>\r\n                        <Button onClick={() => handleClose(false)} color=\"error\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"contained\" size=\"small\" onClick={() => handleClose(true)} autoFocus>\r\n                            Delete\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>\r\n            )}\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nAlertItemDelete.propTypes = {\r\n    open: PropTypes.bool,\r\n    handleClose: PropTypes.func,\r\n    title: PropTypes.string\r\n};\r\n","import { useState, useCallback } from 'react';\r\n\r\n// material-ui\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport { Box, Paper, Button, IconButton } from '@mui/material';\r\n\r\n// third-party\r\nimport { isString } from 'lodash';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\n// assets\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport AddRoundedIcon from '@mui/icons-material/AddRounded';\r\n\r\nconst DropZoneStyle = styled('div')(({ theme }) => ({\r\n    width: 64,\r\n    height: 64,\r\n    fontSize: 24,\r\n    display: 'flex',\r\n    cursor: 'pointer',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    margin: theme.spacing(0.5),\r\n    borderRadius: theme.shape.borderRadius,\r\n    '&:hover': { opacity: 0.72 }\r\n}));\r\n\r\nfunction UploadFile() {\r\n    const [files, setFiles] = useState([]);\r\n\r\n    const handleRemove = (file) => {\r\n        const filteredItems = files.filter((_file) => _file !== file);\r\n        setFiles(filteredItems);\r\n    };\r\n\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file) => {\r\n                    const reader = new FileReader();\r\n\r\n                    reader.onabort = () => console.log('file reading was aborted');\r\n                    reader.onerror = () => console.log('file reading has failed');\r\n                    reader.onload = () => {\r\n                        const binaryStr = reader.result;\r\n                        console.log(binaryStr);\r\n                    };\r\n                    reader.readAsArrayBuffer(file);\r\n\r\n                    return Object.assign(file, {\r\n                        preview: URL.createObjectURL(file)\r\n                    });\r\n                })\r\n            );\r\n        },\r\n        [setFiles]\r\n    );\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {files.map((file) => {\r\n                const { name, preview } = file;\r\n                const key = isString(file) ? file : name;\r\n\r\n                return (\r\n                    <Box\r\n                        key={key}\r\n                        sx={{\r\n                            p: 0,\r\n                            m: 0.5,\r\n                            width: 64,\r\n                            height: 64,\r\n                            borderRadius: 0.25,\r\n                            overflow: 'hidden',\r\n                            position: 'relative'\r\n                        }}\r\n                    >\r\n                        <Paper\r\n                            variant=\"outlined\"\r\n                            component=\"img\"\r\n                            src={isString(file) ? file : preview}\r\n                            sx={{ width: '100%', height: '100%', objectFit: 'cover', position: 'absolute', borderRadius: 1 }}\r\n                        />\r\n                        <Box sx={{ top: 6, right: 6, position: 'absolute' }}>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => handleRemove(file)}\r\n                                sx={{\r\n                                    p: '1px',\r\n                                    color: 'common.white',\r\n                                    bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72),\r\n                                    '&:hover': {\r\n                                        bgcolor: (theme) => alpha(theme.palette.grey[900], 0.48)\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <CancelIcon />\r\n                            </IconButton>\r\n                        </Box>\r\n                    </Box>\r\n                );\r\n            })}\r\n\r\n            <DropZoneStyle\r\n                {...getRootProps()}\r\n                sx={{\r\n                    ...(isDragActive && { opacity: 0.72 })\r\n                }}\r\n            >\r\n                <input {...getInputProps()} />\r\n\r\n                <Button variant=\"outlined\" size=\"large\" sx={{ p: 2.25 }}>\r\n                    <AddRoundedIcon />\r\n                </Button>\r\n            </DropZoneStyle>\r\n        </>\r\n    );\r\n}\r\n\r\nconst ItemAttachments = () => (\r\n    <Box sx={{ display: 'flex' }}>\r\n        <UploadFile />\r\n    </Box>\r\n);\r\n\r\nexport default ItemAttachments;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\n// assets\r\nimport FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';\r\n\r\nconst avatarImage = require.context('assets/images/users', true);\r\n\r\n// ==============================|| KANBAN BOARD - ITEM COMMENT ||============================== //\r\n\r\nconst ItemComment = ({ comment, profile }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50],\r\n                p: 1.5,\r\n                mt: 1.25\r\n            }}\r\n        >\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                    <Grid container wrap=\"nowrap\" alignItems=\"center\" spacing={1}>\r\n                        <Grid item>\r\n                            <Avatar\r\n                                sx={{ width: 24, height: 24 }}\r\n                                size=\"sm\"\r\n                                alt=\"User 1\"\r\n                                src={profile && profile.avatar && avatarImage(`./${profile.avatar}`)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <Grid container alignItems=\"center\" spacing={1}>\r\n                                <Grid item>\r\n                                    <Typography align=\"left\" variant=\"h5\" component=\"div\">\r\n                                        {profile.name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography align=\"left\" variant=\"caption\">\r\n                                        <FiberManualRecordIcon sx={{ width: 10, height: 10, opacity: 0.5, my: 0, mx: 0.625 }} />\r\n                                        {profile.time}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ '&.MuiGrid-root': { pt: 1.5 } }}>\r\n                    <Typography align=\"left\" variant=\"body2\">\r\n                        {comment?.comment}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n\r\nItemComment.propTypes = {\r\n    comment: PropTypes.object,\r\n    profile: PropTypes.object\r\n};\r\n\r\nexport default ItemComment;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n    Autocomplete,\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    MenuItem,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    TextField,\r\n    Typography\r\n} from '@mui/material';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\r\n\r\n// third-party\r\nimport * as yup from 'yup';\r\nimport { useFormik } from 'formik';\r\n\r\n// project imports\r\nimport ItemAttachments from './ItemAttachments';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { editItem } from 'store/slices/kanban';\r\n\r\nconst avatarImage = require.context('assets/images/users', true);\r\nconst validationSchema = yup.object({\r\n    title: yup.string().required('Task title is required'),\r\n    dueDate: yup.date()\r\n});\r\n\r\n// ==============================|| KANBAN BOARD - ITEM EDIT ||============================== //\r\n\r\nconst EditItem = ({ item, profiles, userStory, columns, handleDrawerOpen }) => {\r\n    const dispatch = useDispatch();\r\n    const { items } = useSelector((state) => state.kanban);\r\n    const itemUserStory = userStory.filter((story) => story.itemIds.filter((itemId) => itemId === item.id)[0])[0];\r\n    const itemColumn = columns.filter((column) => column.itemIds.filter((itemId) => itemId === item.id)[0])[0];\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            id: item.id,\r\n            title: item.title,\r\n            assign: item.assign,\r\n            priority: item.priority,\r\n            dueDate: item.dueDate ? new Date(item.dueDate) : new Date(),\r\n            description: item.description,\r\n            commentIds: item.commentIds,\r\n            image: item.image,\r\n            storyId: itemUserStory ? itemUserStory.id : '',\r\n            columnId: itemColumn ? itemColumn.id : '',\r\n            attachments: item.attachments\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            const itemToEdit = {\r\n                id: values.id,\r\n                title: values.title,\r\n                assign: values.assign,\r\n                priority: values.priority,\r\n                dueDate: values.dueDate ? new Date(values.dueDate) : new Date(),\r\n                description: values.description,\r\n                commentIds: values.commentIds,\r\n                image: values.image,\r\n                attachments: values.attachments\r\n            };\r\n            dispatch(editItem(values.columnId, columns, itemToEdit, items, values.storyId, userStory));\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n\r\n            handleDrawerOpen();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"title\"\r\n                            name=\"title\"\r\n                            label=\"Title\"\r\n                            value={formik.values.title}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.title && Boolean(formik.errors.title)}\r\n                            helperText={formik.touched.title && formik.errors.title}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" spacing={2}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"subtitle1\">Assign to:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={8}>\r\n                                <Grid container justifyContent=\"flex-start\">\r\n                                    <Autocomplete\r\n                                        id=\"assign\"\r\n                                        value={profiles.find((profile) => profile.id === formik.values.assign)}\r\n                                        onChange={(event, value) => {\r\n                                            formik.setFieldValue('assign', value?.id);\r\n                                        }}\r\n                                        options={profiles}\r\n                                        fullWidth\r\n                                        autoHighlight\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        isOptionEqualToValue={(option) => option.id === formik.values.assign}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\r\n                                                <img loading=\"lazy\" width=\"20\" src={avatarImage(`./${option.avatar}`)} alt=\"\" />\r\n                                                {option.name}\r\n                                            </Box>\r\n                                        )}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                name=\"assign\"\r\n                                                label=\"Choose a assignee\"\r\n                                                inputProps={{\r\n                                                    ...params.inputProps,\r\n                                                    autoComplete: 'new-password' // disable autocomplete and autofill\r\n                                                }}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" spacing={2}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"subtitle1\">Prioritize:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={8}>\r\n                                <FormControl>\r\n                                    <RadioGroup\r\n                                        row\r\n                                        aria-label=\"color\"\r\n                                        value={formik.values.priority}\r\n                                        onChange={formik.handleChange}\r\n                                        name=\"priority\"\r\n                                        id=\"priority\"\r\n                                    >\r\n                                        <FormControlLabel\r\n                                            value=\"low\"\r\n                                            control={<Radio color=\"primary\" sx={{ color: 'primary.main' }} />}\r\n                                            label=\"Low\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            value=\"medium\"\r\n                                            control={<Radio color=\"warning\" sx={{ color: 'warning.main' }} />}\r\n                                            label=\"Medium\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            value=\"high\"\r\n                                            control={<Radio color=\"error\" sx={{ color: 'error.main' }} />}\r\n                                            label=\"High\"\r\n                                        />\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" spacing={2}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"subtitle1\">Due date:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={8}>\r\n                                <DesktopDatePicker\r\n                                    label=\"Due Date\"\r\n                                    value={formik.values.dueDate}\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    onChange={(date) => {\r\n                                        formik.setFieldValue('dueDate', date);\r\n                                    }}\r\n                                    slotProps={{ textField: { fullWidth: true } }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" spacing={2}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"subtitle1\">Description:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={8}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    id=\"description\"\r\n                                    name=\"description\"\r\n                                    multiline\r\n                                    rows={3}\r\n                                    value={formik.values.description}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                    helperText={formik.touched.description && formik.errors.description}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" spacing={2}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"subtitle1\">User Story:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={8}>\r\n                                <FormControl fullWidth>\r\n                                    <Select\r\n                                        id=\"storyId\"\r\n                                        name=\"storyId\"\r\n                                        displayEmpty\r\n                                        value={formik.values.storyId}\r\n                                        onChange={formik.handleChange}\r\n                                        inputProps={{ 'aria-label': 'Without label' }}\r\n                                    >\r\n                                        {userStory.map((story, index) => (\r\n                                            <MenuItem key={index} value={story.id}>\r\n                                                {story.id} - {story.title}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" spacing={2}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"subtitle1\">State:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={8}>\r\n                                <FormControl fullWidth>\r\n                                    <Select\r\n                                        id=\"columnId\"\r\n                                        name=\"columnId\"\r\n                                        displayEmpty\r\n                                        value={formik.values.columnId}\r\n                                        onChange={formik.handleChange}\r\n                                        inputProps={{ 'aria-label': 'Without label' }}\r\n                                    >\r\n                                        {columns.map((column, index) => (\r\n                                            <MenuItem key={index} value={column.id}>\r\n                                                {column.title}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" spacing={2}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <Typography variant=\"subtitle1\">Attachments:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={8}>\r\n                                <ItemAttachments attachments={formik.values.attachments} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <AnimateButton>\r\n                            <Button fullWidth variant=\"contained\" type=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </LocalizationProvider>\r\n        </form>\r\n    );\r\n};\r\n\r\nEditItem.propTypes = {\r\n    item: PropTypes.object,\r\n    profiles: PropTypes.array,\r\n    userStory: PropTypes.array,\r\n    columns: PropTypes.array,\r\n    handleDrawerOpen: PropTypes.func\r\n};\r\n\r\nexport default EditItem;\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Button, Grid, TextField } from '@mui/material';\r\n\r\n// third-party\r\nimport { Chance } from 'chance';\r\n\r\n// project imports\r\nimport useConfig from 'hooks/useConfig';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { addItemComment } from 'store/slices/kanban';\r\n\r\n// assets\r\nimport AddPhotoAlternateTwoToneIcon from '@mui/icons-material/AddPhotoAlternateTwoTone';\r\nimport AttachFileTwoToneIcon from '@mui/icons-material/AttachFileTwoTone';\r\nimport AddToDriveTwoToneIcon from '@mui/icons-material/AddToDriveTwoTone';\r\n\r\nconst chance = new Chance();\r\n\r\n// ==============================|| KANBAN BOARD - ADD ITEM COMMENT ||============================== //\r\n\r\nconst AddItemComment = ({ itemId }) => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const { borderRadius } = useConfig();\r\n    const { comments, items } = useSelector((state) => state.kanban);\r\n\r\n    const [comment, setComment] = useState('');\r\n    const [isComment, setIsComment] = useState(false);\r\n\r\n    const addTaskComment = () => {\r\n        if (comment.length > 0) {\r\n            const newComment = {\r\n                id: `${chance.integer({ min: 1000, max: 9999 })}`,\r\n                comment,\r\n                profileId: 'profile-1'\r\n            };\r\n\r\n            dispatch(addItemComment(itemId, newComment, items, comments));\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Comment Add successfully',\r\n                    anchorOrigin: { vertical: 'top', horizontal: 'right' },\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n\r\n            setComment('');\r\n        } else {\r\n            setIsComment(true);\r\n        }\r\n    };\r\n\r\n    const handleAddTaskComment = (event) => {\r\n        if (event.key === 'Enter' || event.keyCode === 13) {\r\n            addTaskComment();\r\n        }\r\n    };\r\n\r\n    const handleTaskComment = (event) => {\r\n        const newComment = event.target.value;\r\n        setComment(newComment);\r\n        if (newComment.length <= 0) {\r\n            setIsComment(true);\r\n        } else {\r\n            setIsComment(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                p: 2.5,\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.primary[200] + 75,\r\n                borderRadius: `${borderRadius}px`\r\n            }}\r\n        >\r\n            <Grid container alignItems=\"center\" spacing={0.5}>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        placeholder=\"Add Comment\"\r\n                        value={comment}\r\n                        onChange={handleTaskComment}\r\n                        sx={{\r\n                            mb: 2,\r\n                            '& input': { bgcolor: 'transparent', p: 0, borderRadius: '0px' },\r\n                            '& fieldset': { display: 'none' },\r\n                            '& .MuiFormHelperText-root': {\r\n                                ml: 0\r\n                            },\r\n                            '& .MuiOutlinedInput-root': {\r\n                                bgcolor: 'transparent'\r\n                            }\r\n                        }}\r\n                        onKeyUp={handleAddTaskComment}\r\n                        helperText={isComment ? 'Comment is required.' : ''}\r\n                        error={isComment}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"text\" color=\"primary\" sx={{ p: 0.5, minWidth: 32 }} aria-label=\"add photo\">\r\n                        <AddPhotoAlternateTwoToneIcon />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"text\" color=\"primary\" sx={{ p: 0.5, minWidth: 32 }} aria-label=\"attachment\">\r\n                        <AttachFileTwoToneIcon />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"text\" color=\"primary\" sx={{ p: 0.5, minWidth: 32 }} aria-label=\"add file for your google drive\">\r\n                        <AddToDriveTwoToneIcon />\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs zeroMinWidth />\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={addTaskComment}>\r\n                        Comment\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nAddItemComment.propTypes = {\r\n    itemId: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\r\n};\r\n\r\nexport default AddItemComment;\r\n","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Box, Button, Divider, Drawer, Grid, Stack, Typography } from '@mui/material';\r\n\r\n// third party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n// project imports\r\nimport ItemComment from './ItemComment';\r\nimport EditItem from './EditItem';\r\nimport AddItemComment from './AddItemComment';\r\nimport AlertItemDelete from './AlertItemDelete';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { selectItem, deleteItem } from 'store/slices/kanban';\r\n\r\n// assets\r\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\n\r\n// ==============================|| KANBAN BOARD - ITEM DETAILS ||============================== //\r\n\r\nconst ItemDetails = () => {\r\n    let selectedData;\r\n    let commentList = <></>;\r\n\r\n    const dispatch = useDispatch();\r\n    const kanban = useSelector((state) => state.kanban);\r\n    const { columns, comments, profiles, items, selectedItem, userStory } = kanban;\r\n\r\n    // drawer\r\n    const [open, setOpen] = useState(selectedItem !== false);\r\n    const handleDrawerOpen = () => {\r\n        setOpen((prevState) => !prevState);\r\n        dispatch(selectItem(false));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedItem !== false) {\r\n            setOpen(true);\r\n        }\r\n    }, [selectedItem]);\r\n\r\n    if (selectedItem !== false) {\r\n        selectedData = items.filter((item) => item.id === selectedItem)[0];\r\n        if (selectedData?.commentIds) {\r\n            commentList = [...selectedData.commentIds].reverse().map((commentId, index) => {\r\n                const commentData = comments.filter((comment) => comment.id === commentId)[0];\r\n                const profile = profiles.filter((item) => item.id === commentData.profileId)[0];\r\n                return <ItemComment key={index} comment={commentData} profile={profile} />;\r\n            });\r\n        }\r\n    }\r\n\r\n    const [openModal, setOpenModal] = useState(false);\r\n\r\n    const handleModalClose = (status) => {\r\n        setOpenModal(false);\r\n        if (status) {\r\n            handleDrawerOpen();\r\n            dispatch(deleteItem(selectedData.id, items, columns, userStory));\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Task Deleted successfully',\r\n                    anchorOrigin: { vertical: 'top', horizontal: 'right' },\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            sx={{\r\n                ml: open ? 3 : 0,\r\n                flexShrink: 0,\r\n                zIndex: 1200,\r\n                overflowX: 'hidden',\r\n                width: { xs: 320, md: 450 },\r\n                '& .MuiDrawer-paper': {\r\n                    height: '100vh',\r\n                    width: { xs: 320, md: 450 },\r\n                    position: 'fixed',\r\n                    border: 'none',\r\n                    borderRadius: '0px'\r\n                }\r\n            }}\r\n            variant=\"temporary\"\r\n            anchor=\"right\"\r\n            open={open}\r\n            ModalProps={{ keepMounted: true }}\r\n            onClose={handleDrawerOpen}\r\n        >\r\n            {open && (\r\n                <>\r\n                    {selectedData && (\r\n                        <>\r\n                            <Box sx={{ p: 3 }}>\r\n                                <Grid container alignItems=\"center\" spacing={0.5} justifyContent=\"space-between\">\r\n                                    <Grid item sx={{ width: 'calc(100% - 50px)' }}>\r\n                                        <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\r\n                                            <Button\r\n                                                variant=\"text\"\r\n                                                color=\"error\"\r\n                                                sx={{ p: 0.5, minWidth: 32, display: { xs: 'block', md: 'none' } }}\r\n                                                onClick={handleDrawerOpen}\r\n                                            >\r\n                                                <HighlightOffIcon />\r\n                                            </Button>\r\n                                            <Typography\r\n                                                variant=\"h4\"\r\n                                                sx={{\r\n                                                    display: 'inline-block',\r\n                                                    width: 'calc(100% - 34px)',\r\n                                                    textOverflow: 'ellipsis',\r\n                                                    whiteSpace: 'nowrap',\r\n                                                    overflow: 'hidden',\r\n                                                    verticalAlign: 'middle'\r\n                                                }}\r\n                                            >\r\n                                                {selectedData.title}\r\n                                            </Typography>\r\n                                        </Stack>\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            variant=\"text\"\r\n                                            color=\"error\"\r\n                                            sx={{ p: 0.5, minWidth: 32 }}\r\n                                            onClick={() => setOpenModal(true)}\r\n                                        >\r\n                                            <DeleteTwoToneIcon />\r\n                                        </Button>\r\n                                        <AlertItemDelete title={selectedData.title} open={openModal} handleClose={handleModalClose} />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Divider />\r\n                            <PerfectScrollbar component=\"div\">\r\n                                <Box sx={{ p: 3 }}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs={12}>\r\n                                            <EditItem\r\n                                                item={selectedData}\r\n                                                profiles={profiles}\r\n                                                userStory={userStory}\r\n                                                columns={columns}\r\n                                                handleDrawerOpen={handleDrawerOpen}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            {commentList}\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <AddItemComment itemId={selectedItem} />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Box>\r\n                            </PerfectScrollbar>\r\n                        </>\r\n                    )}\r\n                    {!selectedData && (\r\n                        <Stack justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh' }}>\r\n                            <Typography variant=\"h5\" color=\"error\">\r\n                                No item found\r\n                            </Typography>\r\n                        </Stack>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default ItemDetails;\r\n"],"names":["AlertStoryDelete","_ref","title","open","handleClose","_jsx","Dialog","onClose","keepMounted","maxWidth","children","_jsxs","_Fragment","DialogTitle","id","DialogContent","DialogContentText","DialogActions","sx","mr","Button","onClick","color","variant","size","autoFocus","chance","Chance","storyId","theme","useTheme","dispatch","useDispatch","borderRadius","useConfig","comments","userStory","useSelector","state","kanban","comment","setComment","useState","isComment","setIsComment","addNewStoryComment","length","newComment","integer","min","max","profileId","addStoryComment","openSnackbar","message","anchorOrigin","vertical","horizontal","alert","close","Box","p","border","borderColor","palette","mode","background","default","primary","Grid","container","alignItems","spacing","item","xs","TextField","fullWidth","placeholder","value","onChange","event","target","mb","bgcolor","display","ml","onKeyUp","key","keyCode","helperText","error","minWidth","AddPhotoAlternateTwoToneIcon","AttachFileTwoToneIcon","AddToDriveTwoToneIcon","zeroMinWidth","avatarImage","require","profile","Card","dark","main","grey","mt","wrap","Avatar","width","height","alt","src","avatar","Typography","align","component","name","FiberManualRecordIcon","opacity","my","mx","time","pt","validationSchema","yup","required","dueDate","story","handleDrawerOpen","profiles","columns","userStoryOrder","formik","useFormik","enableReinitialize","initialValues","assign","columnId","priority","Date","acceptance","description","commentIds","image","itemIds","onSubmit","values","editStory","openModal","setOpenModal","Drawer","flexShrink","zIndex","overflowX","md","position","anchor","ModalProps","resetForm","justifyContent","Stack","direction","HighlightOffIcon","textOverflow","whiteSpace","overflow","verticalAlign","DeleteTwoToneIcon","status","deleteStory","Divider","PerfectScrollbar","handleSubmit","LocalizationProvider","dateAdapter","AdapterDateFns","label","handleChange","touched","Boolean","errors","sm","Autocomplete","find","setFieldValue","options","autoHighlight","getOptionLabel","option","isOptionEqualToValue","renderOption","props","loading","renderInput","params","inputProps","autoComplete","FormControl","RadioGroup","row","FormControlLabel","control","Radio","DesktopDatePicker","format","date","slotProps","textField","multiline","rows","Select","displayEmpty","map","column","index","MenuItem","ItemAttachments","attachments","AnimateButton","type","reverse","commentId","commentData","filter","StoryComment","AddStoryComment","AlertItemDelete","DropZoneStyle","styled","fontSize","cursor","margin","shape","UploadFile","files","setFiles","handleDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsArrayBuffer","Object","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","isString","m","Paper","objectFit","top","right","IconButton","filteredItems","_file","handleRemove","alpha","CancelIcon","AddRoundedIcon","items","itemUserStory","itemId","itemColumn","itemToEdit","editItem","addTaskComment","addItemComment","ItemDetails","selectedData","commentList","selectedItem","setOpen","prevState","selectItem","_selectedData","useEffect","ItemComment","deleteItem","EditItem","AddItemComment"],"sourceRoot":""}