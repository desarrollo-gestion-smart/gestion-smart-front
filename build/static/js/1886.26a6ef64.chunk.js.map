{"version":3,"file":"static/js/1886.26a6ef64.chunk.js","mappings":"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","sources":["ui-component/cards/CardSecondaryAction.js","views/forms/forms-validation/LoginForms.js","views/forms/forms-validation/InstantFeedback.js","views/forms/forms-validation/RadioGroupForms.js","views/forms/forms-validation/CheckboxForms.js","views/forms/forms-validation/SelectForms.js","views/forms/forms-validation/AutocompleteForms.js","views/forms/forms-validation/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { ButtonBase, Link, Tooltip } from '@mui/material';\r\n\r\n// project imports\r\nimport Avatar from '../extended/Avatar';\r\n\r\n// ==============================|| CARD SECONDARY ACTION ||============================== //\r\n\r\nconst CardSecondaryAction = ({ title, link, icon }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Tooltip title={title || 'Reference'} placement=\"left\">\r\n            <ButtonBase disableRipple>\r\n                {!icon && (\r\n                    <Avatar\r\n                        component={Link}\r\n                        href={link}\r\n                        target=\"_blank\"\r\n                        alt=\"MUI Logo\"\r\n                        size=\"badge\"\r\n                        color=\"primary\"\r\n                        outline\r\n                        aria-label=\"'ui material icon'\"\r\n                    >\r\n                        <svg width=\"500\" height=\"500\" viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g clipPath=\"url(#clip0)\">\r\n                                <path\r\n                                    d=\"M100 260.9V131L212.5 195.95V239.25L137.5 195.95V282.55L100 260.9Z\"\r\n                                    fill={theme.palette.primary[800]}\r\n                                />\r\n                                <path\r\n                                    d=\"M212.5 195.95L325 131V260.9L250 304.2L212.5 282.55L287.5 239.25V195.95L212.5 239.25V195.95Z\"\r\n                                    fill={theme.palette.primary.main}\r\n                                />\r\n                                <path d=\"M212.5 282.55V325.85L287.5 369.15V325.85L212.5 282.55Z\" fill={theme.palette.primary[800]} />\r\n                                <path\r\n                                    d=\"M287.5 369.15L400 304.2V217.6L362.5 239.25V282.55L287.5 325.85V369.15ZM362.5 195.95V152.65L400 131V174.3L362.5 195.95Z\"\r\n                                    fill={theme.palette.primary.main}\r\n                                />\r\n                            </g>\r\n                            <defs>\r\n                                <clipPath id=\"clip0\">\r\n                                    <rect width=\"300\" height=\"238.3\" fill=\"white\" transform=\"translate(100 131)\" />\r\n                                </clipPath>\r\n                            </defs>\r\n                        </svg>\r\n                    </Avatar>\r\n                )}\r\n                {icon && (\r\n                    <Avatar component={Link} href={link} target=\"_blank\" size=\"badge\" color=\"primary\" outline aria-label=\"ui material icon\">\r\n                        {icon}\r\n                    </Avatar>\r\n                )}\r\n            </ButtonBase>\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nCardSecondaryAction.propTypes = {\r\n    icon: PropTypes.node,\r\n    link: PropTypes.string,\r\n    title: PropTypes.string\r\n};\r\n\r\nexport default CardSecondaryAction;\r\n","import { useDispatch } from 'store';\r\n\r\n// material-ui\r\nimport { Button, Grid, Stack, TextField } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n// assets\r\nimport LinkIcon from '@mui/icons-material/Link';\r\n\r\n/**\r\n * 'Enter your email'\r\n * yup.string Expected 0 arguments, but got 1 */\r\nconst validationSchema = yup.object({\r\n    email: yup.string().email('Enter a valid email').required('Email is required'),\r\n    password: yup.string().min(8, 'Password should be of minimum 8 characters length').required('Password is required')\r\n});\r\n\r\n// ==============================|| FORM VALIDATION - LOGIN FORMIK ||============================== //\r\n\r\nconst LoginForms = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: () => {\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <MainCard\r\n            title=\"On Submit\"\r\n            secondary={<SecondaryAction icon={<LinkIcon fontSize=\"small\" />} link=\"https://formik.org/docs/examples/with-material-ui\" />}\r\n        >\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            value={formik.values.email}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            value={formik.values.password}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\">\r\n                                    Verify & Submit\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default LoginForms;\r\n","import { useDispatch } from 'store';\r\n\r\n// material-ui\r\nimport { Button, Grid, Stack, TextField } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n/**\r\n * 'Enter your email'\r\n * yup.string Expected 0 arguments, but got 1 */\r\nconst validationSchema = yup.object({\r\n    emailInstant: yup.string().email('Enter a valid email').required('Email is required'),\r\n    passwordInstant: yup.string().min(8, 'Password should be of minimum 8 characters length').required('Password is required')\r\n});\r\n\r\n// ==============================|| FORM VALIDATION - INSTANT FEEDBACK FORMIK ||============================== //\r\n\r\nconst InstantFeedback = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            emailInstant: '',\r\n            passwordInstant: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: () => {\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'On Leave - Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <MainCard title=\"On Leave\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"emailInstant\"\r\n                            name=\"emailInstant\"\r\n                            label=\"Email\"\r\n                            value={formik.values.emailInstant}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.emailInstant && Boolean(formik.errors.emailInstant)}\r\n                            helperText={formik.touched.emailInstant && formik.errors.emailInstant}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"passwordInstant\"\r\n                            name=\"passwordInstant\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            value={formik.values.passwordInstant}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.passwordInstant && Boolean(formik.errors.passwordInstant)}\r\n                            helperText={formik.touched.passwordInstant && formik.errors.passwordInstant}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default InstantFeedback;\r\n","import { useDispatch } from 'store';\r\n\r\n// material-ui\r\nimport { Button, Grid, FormControl, FormControlLabel, FormHelperText, Radio, RadioGroup, Stack } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n/**\r\n * 'Select your favorite color'\r\n * yup.string Expected 0 arguments, but got 1 */\r\nconst validationSchema = yup.object({\r\n    color: yup.string().required('Color selection is required')\r\n});\r\n\r\n// ==============================|| FORM VALIDATION - RADIO GROUP FORMIK ||============================== //\r\n\r\nconst RadioGroupForms = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            color: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: () => {\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Radio - Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <MainCard title=\"Radio\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <RadioGroup\r\n                                row\r\n                                aria-label=\"color\"\r\n                                value={formik.values.color}\r\n                                onChange={formik.handleChange}\r\n                                name=\"color\"\r\n                                id=\"color\"\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"primary\"\r\n                                    control={\r\n                                        <Radio\r\n                                            sx={{\r\n                                                color: 'primary.main',\r\n                                                '&.Mui-checked': { color: 'primary.main' }\r\n                                            }}\r\n                                        />\r\n                                    }\r\n                                    label=\"Primary\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"error\"\r\n                                    control={\r\n                                        <Radio\r\n                                            sx={{\r\n                                                color: 'error.main',\r\n                                                '&.Mui-checked': { color: 'error.main' }\r\n                                            }}\r\n                                        />\r\n                                    }\r\n                                    label=\"Error\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"secondary\"\r\n                                    control={\r\n                                        <Radio\r\n                                            sx={{\r\n                                                color: 'secondary.main',\r\n                                                '&.Mui-checked': { color: 'secondary.main' }\r\n                                            }}\r\n                                        />\r\n                                    }\r\n                                    label=\"Secondary\"\r\n                                />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {formik.errors.color && (\r\n                            <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                {' '}\r\n                                {formik.errors.color}{' '}\r\n                            </FormHelperText>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default RadioGroupForms;\r\n","import { useDispatch } from 'store';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Checkbox, FormHelperText, Stack } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nconst validationSchema = yup.object({\r\n    color: yup.array().min(1, 'At least one color is required')\r\n});\r\n\r\n// ==============================|| FORM VALIDATION - CHECKBOX FORMIK ||============================== //\r\n\r\nconst CheckboxForms = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            color: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: () => {\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Checkbox - Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <MainCard title=\"Checkbox\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        <Checkbox value=\"primary\" name=\"color\" color=\"primary\" onChange={formik.handleChange} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Checkbox\r\n                            value=\"secondary\"\r\n                            name=\"color\"\r\n                            color=\"secondary\"\r\n                            sx={{ color: theme.palette.secondary.main }}\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Checkbox\r\n                            value=\"error\"\r\n                            name=\"color\"\r\n                            sx={{\r\n                                color: theme.palette.error.main,\r\n                                '&.Mui-checked': {\r\n                                    color: theme.palette.error.main\r\n                                }\r\n                            }}\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sx={{ pt: '0 !important' }}>\r\n                        {formik.errors.color && (\r\n                            <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                {' '}\r\n                                {formik.errors.color}{' '}\r\n                            </FormHelperText>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default CheckboxForms;\r\n","import { useDispatch } from 'store';\r\n\r\n// material-ui\r\nimport { Button, FormControl, FormHelperText, Grid, InputLabel, Select, Stack, MenuItem } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n/**\r\n * 'Enter your age'\r\n * yup.number Expected 0 arguments, but got 1 */\r\nconst validationSchema = yup.object({\r\n    age: yup.number().required('Age selection is required.')\r\n});\r\n\r\n// ==============================|| FORM VALIDATION - SELECT FORMIK ||============================== //\r\n\r\nconst SelectForms = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            age: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: () => {\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Select - Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <MainCard title=\"Select\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                            <InputLabel id=\"age-select\">Age</InputLabel>\r\n                            <Select\r\n                                labelId=\"age-select\"\r\n                                id=\"age\"\r\n                                name=\"age\"\r\n                                value={formik.values.age}\r\n                                onChange={formik.handleChange}\r\n                                label=\"Age\"\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value={10}>Ten</MenuItem>\r\n                                <MenuItem value={20}>Twenty</MenuItem>\r\n                                <MenuItem value={30}>Thirty</MenuItem>\r\n                            </Select>\r\n                            {formik.errors.age && (\r\n                                <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                    {' '}\r\n                                    {formik.errors.age}{' '}\r\n                                </FormHelperText>\r\n                            )}\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default SelectForms;\r\n","import { useDispatch } from 'store';\r\n\r\n// material-ui\r\nimport { Autocomplete, Box, Button, Grid, InputAdornment, Stack, TextField, Typography, Chip } from '@mui/material';\r\nimport { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// third-party\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n// assets\r\nimport ArrowDropDown from '@mui/icons-material/ArrowDropDown';\r\nimport Close from '@mui/icons-material/Close';\r\n\r\nconst roles = ['User', 'Admin', 'Staff', 'Manager'];\r\n\r\nconst skills = ['Java', 'HTML', 'Bootstrap', 'JavaScript', 'NodeJS', 'React', 'Angular', 'CI'];\r\n\r\nconst filter = createFilterOptions();\r\nconst filterSkills = createFilterOptions();\r\n\r\nconst validationSchema = yup.object({\r\n    role: yup\r\n        .string()\r\n        .trim()\r\n        .required('Role selection is required')\r\n        .matches(/^[a-z\\d\\-/#_\\s]+$/i, 'Only alphanumerics are allowed')\r\n        .max(50, 'Role must be at most 50 characters'),\r\n    skills: yup\r\n        .array()\r\n        .of(\r\n            yup\r\n                .string()\r\n                .trim()\r\n                .required('Leading spaces found in your tag')\r\n                .matches(/^[a-z\\d\\-/#.&_\\s]+$/i, 'Only alphanumerics are allowed')\r\n                .max(50, 'Skill tag field must be at most 50 characters')\r\n        )\r\n        .required('Skill selection is required')\r\n        .min(3, 'Skill tags field must have at least 3 items')\r\n        .max(15, 'Please select a maximum of 15 skills.')\r\n});\r\n\r\n// ==============================|| FORM VALIDATION - AUTOCOMPLETE FORMIK ||============================== //\r\n\r\nconst AutocompleteForms = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            role: '',\r\n            skills: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: () => {\r\n            dispatch(\r\n                openSnackbar({\r\n                    open: true,\r\n                    message: 'Autocomplete - Submit Success',\r\n                    variant: 'alert',\r\n                    alert: {\r\n                        color: 'success'\r\n                    },\r\n                    close: false\r\n                })\r\n            );\r\n        }\r\n    });\r\n\r\n    let TagsError = false;\r\n    if (formik.touched.skills && formik.errors.skills) {\r\n        if (formik.touched.skills && typeof formik.errors.skills === 'string') {\r\n            TagsError = formik.errors.skills;\r\n        } else if (formik.errors.skills && typeof formik.errors.skills !== 'string') {\r\n            formik.errors.skills.map((item) => {\r\n                if (typeof item === 'object') TagsError = item.label;\r\n                return item;\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MainCard title=\"Autocomplete\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <Autocomplete\r\n                            fullWidth\r\n                            value={formik.values.role}\r\n                            disableClearable\r\n                            onChange={(event, newValue) => {\r\n                                const jobExist = roles.includes(newValue);\r\n                                if (!jobExist) {\r\n                                    const matchData = newValue.match(/\"((?:\\\\.|[^\"\\\\])*)\"/);\r\n                                    formik.setFieldValue('role', matchData && matchData[1]);\r\n                                } else {\r\n                                    formik.setFieldValue('role', newValue);\r\n                                }\r\n                            }}\r\n                            filterOptions={(options, params) => {\r\n                                const filtered = filter(options, params);\r\n                                const { inputValue } = params;\r\n                                const isExisting = options.some((option) => inputValue === option);\r\n                                if (inputValue !== '' && !isExisting) {\r\n                                    filtered.push(`Add \"${inputValue}\"`);\r\n                                }\r\n                                return filtered;\r\n                            }}\r\n                            selectOnFocus\r\n                            clearOnBlur\r\n                            autoHighlight\r\n                            handleHomeEndKeys\r\n                            id=\"free-solo-with-text-demo\"\r\n                            options={roles}\r\n                            getOptionLabel={(option) => {\r\n                                let value = option;\r\n                                const jobExist = roles.includes(option);\r\n                                if (!jobExist) {\r\n                                    const matchData = option.match(/\"((?:\\\\.|[^\"\\\\])*)\"/);\r\n                                    if (matchData && matchData[1]) value = matchData && matchData[1];\r\n                                }\r\n                                return value;\r\n                            }}\r\n                            renderOption={(props, option) => (\r\n                                <Box component=\"li\" {...props}>\r\n                                    {option}\r\n                                </Box>\r\n                            )}\r\n                            freeSolo\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    name=\"role\"\r\n                                    error={formik.touched.role && Boolean(formik.errors.role)}\r\n                                    helperText={formik.touched.role && formik.errors.role && formik.errors.role}\r\n                                    placeholder=\"Select Role\"\r\n                                    InputProps={{\r\n                                        ...params.InputProps,\r\n                                        sx: { bgcolor: 'grey.0' },\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <ArrowDropDown sx={{ color: 'text.primary' }} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Autocomplete\r\n                            id=\"skills\"\r\n                            multiple\r\n                            fullWidth\r\n                            autoHighlight\r\n                            freeSolo\r\n                            disableCloseOnSelect\r\n                            options={skills}\r\n                            value={formik.values.skills}\r\n                            onBlur={formik.handleBlur}\r\n                            getOptionLabel={(option) => option}\r\n                            onChange={(event, newValue) => {\r\n                                const jobExist = skills.includes(newValue[newValue.length - 1]);\r\n                                if (!jobExist) {\r\n                                    formik.setFieldValue('skills', newValue);\r\n                                } else {\r\n                                    formik.setFieldValue('skills', newValue);\r\n                                }\r\n                            }}\r\n                            filterOptions={(options, params) => {\r\n                                const filtered = filterSkills(options, params);\r\n                                const { inputValue } = params;\r\n                                const isExisting = options.some((option) => inputValue === option);\r\n                                if (inputValue !== '' && !isExisting) {\r\n                                    filtered.push(inputValue);\r\n                                }\r\n\r\n                                return filtered;\r\n                            }}\r\n                            renderOption={(props, option) => (\r\n                                <Box component=\"li\" {...props}>\r\n                                    {!skills.some((v) => option.includes(v)) ? `Add \"${option}\"` : option}\r\n                                </Box>\r\n                            )}\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    name=\"skills\"\r\n                                    placeholder=\"Write your skills\"\r\n                                    error={formik.touched.skills && Boolean(formik.errors.skills)}\r\n                                    helperText={TagsError}\r\n                                />\r\n                            )}\r\n                            renderTags={(value, getTagProps) =>\r\n                                value.map((option, index) => {\r\n                                    let error = false;\r\n                                    if (formik.touched.skills && formik.errors.skills && typeof formik.errors.skills !== 'string') {\r\n                                        if (typeof formik.errors.skills[index] === 'object') error = true;\r\n                                    }\r\n\r\n                                    return (\r\n                                        <Chip\r\n                                            key={index}\r\n                                            {...getTagProps({ index })}\r\n                                            // variant=\"combined\"\r\n                                            color={error ? 'error' : 'secondary'}\r\n                                            label={\r\n                                                <Typography variant=\"caption\" color=\"secondary.dark\">\r\n                                                    {option}\r\n                                                </Typography>\r\n                                            }\r\n                                            deleteIcon={<Close />}\r\n                                            size=\"small\"\r\n                                        />\r\n                                    );\r\n                                })\r\n                            }\r\n                        />\r\n                        <Stack direction=\"row\" spacing={1} alignItems=\"center\" sx={{ mt: 1.5 }}>\r\n                            <Typography variant=\"caption\">Suggestion:</Typography>\r\n                            {skills\r\n                                .filter((skill) => formik.values.skills && !formik.values.skills.map((item) => item).includes(skill))\r\n                                .slice(0, 5)\r\n                                .map((option, index) => (\r\n                                    <Chip\r\n                                        key={index}\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => formik.setFieldValue('skills', [...formik.values.skills, option])}\r\n                                        label={\r\n                                            <Typography variant=\"caption\" color=\"text.dark\">\r\n                                                {option}\r\n                                            </Typography>\r\n                                        }\r\n                                        size=\"small\"\r\n                                    />\r\n                                ))}\r\n                        </Stack>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                            <AnimateButton>\r\n                                <Button variant=\"contained\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default AutocompleteForms;\r\n","// material-ui\r\nimport { Grid } from '@mui/material';\r\n\r\n// project imports\r\nimport LoginForms from './LoginForms';\r\nimport InstantFeedback from './InstantFeedback';\r\nimport RadioGroupForms from './RadioGroupForms';\r\nimport CheckboxForms from './CheckboxForms';\r\nimport SelectForms from './SelectForms';\r\nimport AutocompleteForms from './AutocompleteForms';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// ==============================|| FORMS VALIDATION - FORMIK ||============================== //\r\n\r\nconst FormsValidation = () => (\r\n    <Grid container spacing={gridSpacing}>\r\n        <Grid item xs={12} md={6}>\r\n            <LoginForms />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n            <InstantFeedback />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n            <RadioGroupForms />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n            <CheckboxForms />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n            <SelectForms />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n            <AutocompleteForms />\r\n        </Grid>\r\n    </Grid>\r\n);\r\n\r\nexport default FormsValidation;\r\n"],"names":["_ref","title","link","icon","theme","useTheme","_jsx","Tooltip","placement","children","_jsxs","ButtonBase","disableRipple","Avatar","component","Link","href","target","alt","size","color","outline","width","height","viewBox","fill","xmlns","clipPath","d","palette","primary","main","id","transform","validationSchema","yup","email","required","password","min","LoginForms","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","openSnackbar","open","message","variant","alert","close","MainCard","secondary","SecondaryAction","LinkIcon","fontSize","handleSubmit","Grid","container","spacing","gridSpacing","item","xs","TextField","fullWidth","name","label","value","values","onChange","handleChange","error","touched","Boolean","errors","helperText","type","Stack","direction","justifyContent","AnimateButton","Button","emailInstant","passwordInstant","InstantFeedback","onBlur","handleBlur","RadioGroupForms","FormControl","RadioGroup","row","FormControlLabel","control","Radio","sx","FormHelperText","CheckboxForms","Checkbox","pt","age","SelectForms","m","minWidth","InputLabel","Select","labelId","MenuItem","roles","skills","filter","createFilterOptions","filterSkills","role","trim","matches","max","of","AutocompleteForms","TagsError","map","Autocomplete","disableClearable","event","newValue","includes","setFieldValue","matchData","match","filterOptions","options","params","filtered","inputValue","isExisting","some","option","push","selectOnFocus","clearOnBlur","autoHighlight","handleHomeEndKeys","getOptionLabel","renderOption","props","Box","freeSolo","renderInput","placeholder","InputProps","bgcolor","endAdornment","InputAdornment","position","ArrowDropDown","multiple","disableCloseOnSelect","length","v","renderTags","getTagProps","index","Chip","Typography","deleteIcon","Close","alignItems","mt","skill","slice","onClick","FormsValidation","md"],"sourceRoot":""}