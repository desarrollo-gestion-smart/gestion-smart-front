{"version":3,"file":"static/js/2080.760cebb0.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/AttachmentTwoTone.js","../node_modules/@mui/icons-material/DeleteTwoTone.js","../node_modules/@mui/icons-material/ReplyTwoTone.js","../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/is-buffer/index.js","../node_modules/style-to-object/index.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/index.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/index.js","../node_modules/mdast-util-to-markdown/lib/util/association.js","../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/util/safe.js","../node_modules/mdast-util-to-markdown/lib/util/track.js","../node_modules/mdast-util-gfm-footnote/index.js","../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../node_modules/mdast-util-gfm-strikethrough/index.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-gfm-task-list-item/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/remark-gfm/index.js","../node_modules/unist-util-is/index.js","../node_modules/unist-util-visit-parents/lib/index.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18.5 16H7c-2.21 0-4-1.79-4-4s1.79-4 4-4h12.5c1.38 0 2.5 1.12 2.5 2.5S20.88 13 19.5 13H9c-.55 0-1-.45-1-1s.45-1 1-1h9.5V9.5H9c-1.38 0-2.5 1.12-2.5 2.5s1.12 2.5 2.5 2.5h10.5c2.21 0 4-1.79 4-4s-1.79-4-4-4H7c-3.04 0-5.5 2.46-5.5 5.5s2.46 5.5 5.5 5.5h11.5V16z\"\n}), 'AttachmentTwoTone');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)([/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M8 9h8v10H8z\",\n  opacity: \".3\"\n}, \"0\"), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m15.5 4-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9z\"\n}, \"1\")], 'DeleteTwoTone');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\"\n}), 'ReplyTwoTone');\nexports.default = _default;","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef {Object} PointLike\n * @property {number} [line]\n * @property {number} [column]\n * @property {number} [offset]\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\n/**\n * Check if `node` is *generated*.\n *\n * @param {NodeLike} [node]\n * @returns {boolean}\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * @param {unknown} thing\n * @returns {boolean}\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  var value =\n    // @ts-ignore looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-ignore looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://html.spec.whatwg.org/#space-character>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","export const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = []\n  var input = String(value || '')\n  var index = input.indexOf(',')\n  var start = 0\n  /** @type {boolean} */\n  var end\n  /** @type {string} */\n  var token\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\nexport function stringify(values, options) {\n  var settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('')\n  }\n\n  return values\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\nconst inConstruct = 'phrasing'\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/** @type {FromMarkdownExtension} */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {PhrasingContent} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[_-\\d]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  /** @type {number} */\n  let closingParenIndex\n  /** @type {number} */\n  let openingParens\n  /** @type {number} */\n  let closingParens\n  /** @type {string|undefined} */\n  let trail\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index)\n    trail = trailExec[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/**\n * @returns {FromMarkdownExtension}\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinition(token) {\n    this.enter(\n      {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n      token\n    )\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinitionLabelString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinitionLabelString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinition(token) {\n    this.exit(token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCall(token) {\n    this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCallString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCallString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCall(token) {\n    this.exit(token)\n  }\n}\n\n/**\n * @returns {ToMarkdownExtension}\n */\nexport function gfmFootnoteToMarkdown() {\n  footnoteReference.peek = footnoteReferencePeek\n\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteReference} node\n   */\n  function footnoteReference(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteReference')\n    const subexit = context.enter('reference')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    exit()\n    value += tracker.move(']')\n    return value\n  }\n\n  /** @type {ToMarkdownHandle} */\n  function footnoteReferencePeek() {\n    return '['\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteDefinition')\n    const subexit = context.enter('label')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    value += tracker.move(\n      ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n    )\n    tracker.shift(4)\n    value += tracker.move(\n      indentLines(containerFlow(node, context, tracker.current()), map)\n    )\n    exit()\n\n    return value\n\n    /** @type {Map} */\n    function map(line, index, blank) {\n      if (index) {\n        return (blank ? '' : '    ') + line\n      }\n\n      return line\n    }\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [{character: '~', inConstruct: 'phrasing'}],\n  handlers: {delete: handleDelete}\n}\n\nhandleDelete.peek = peekDelete\n\n/** @type {FromMarkdownHandle} */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('emphasis')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|Array<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {Array<Array<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parent} */ (this.stack[this.stack.length - 2])\n  const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n  const siblings = parent.children\n  const head = node.children[0]\n  let index = -1\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      const sibling = siblings[index]\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else if (\n        node.position &&\n        head.position &&\n        typeof head.position.start.offset === 'number'\n      ) {\n        head.position.start.column++\n        head.position.start.offset++\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\nexport const is =\n  /**\n   * Check if a node passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number|null|undefined} [index] Position of `node` in `parent`\n     * @param {Parent|null|undefined} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\nexport const convert =\n  /**\n   * @type {(\n   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(...parameters) {\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call(this, ...parameters))\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n"],"names":["_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","opacity","hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","parse","StyleToObject","iterator","output","hasIterator","len","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","blankLine","tokenize","effects","ok","nok","factorySpace","code","markdownLineEnding","partial","max","limit","Number","POSITIVE_INFINITY","size","markdownSpace","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","regex","test","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","apply","classifyCharacter","combineExtensions","extensions","all","index","syntaxExtension","extension","hook","left","undefined","right","constructs","existing","before","add","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$0","$1","$2","head","hex","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","includes","stringifyPosition","point","VFileMessage","place","origin","parts","super","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","joined","_len","segments","_key","normalize","sep","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","wrap","middleware","callback","_len3","_key3","fnExpectsCallback","done","exception","Promise","then","_len4","_key4","unified","transformers","fns","pipeline","run","values","middlewareIndex","pop","next","fn","_len2","_key2","use","middelware","trough","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","settings","addPlugin","addList","addPreset","assign","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","includeImageAlt","one","alt","children","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","disable","null","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","resolveText","search","fromMarkdown","config","configure","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","mdastExtensions","tokenStack","listStack","resume","setData","getData","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","depth","parent","referenceType","ancestor","fragment","ordered","spread","checked","compiler","postprocess","defaultConstructs","concat","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","combined","normalizeUri","skip","encodeURIComponent","visit","visitor","reverse","visitParents","parents","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","checks","types","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","v","styleReplacer","parseStyle","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkParse","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","PropTypes","www","w2","w3","dot","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","namedCharacterReference","punctuationContinuation","punctuation","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","wwwAutolink","previousWww","previousUnbalanced","httpAutolink","previousHttp","t1","t2","p","s","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","dotContinuation","dashOrUnderscoreContinuation","afterDashOrUnderscore","gfmAutolinkLiteral","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","labelInside","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizeStrikethrough","resolveAllStrikethrough","strikethrough","gfmTable","seenDelimiter","hasDash","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","originalInterrupt","tokenizeRowEnd","atDelimiterRowBreak","atRowEndHead","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","atRowEndBody","inWhitespaceBody","inCellContentEscapeBody","inHead","inDelimiterRow","inRow","cellStart","seenCellInRow","tasklistCheck","spaceThenNonSpace","gfmTaskListItem","gfm","ccount","character","findAndReplace","RegExp","ignored","convert","pairs","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","global","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","findUrl","findEmail","literalAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","split","isCorrectDomain","trailExec","closingParenIndex","openingParens","closingParens","trail","splitUrl","email","association","containerFlow","indexStack","tracker","createTracker","move","handle","bulletLastUsed","repeat","eol","indentLines","patternCompile","_compiled","patternInScope","listInScope","none","safe","positions","infos","expression","sort","numerical","escapeBackslashes","encode","a","b","whole","track","lineShift","gfmFootnoteToMarkdown","peek","safeOptions","subexit","blank","containerPhrasing","gfmStrikethroughFromMarkdown","gfmStrikethroughToMarkdown","handleDelete","serialize","defaultStringLength","toAlignment","gfmTableFromMarkdown","tableData","enterCell","tableHeader","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","listItemIndent","checkListItemIndent","bullet","bulletCurrent","checkBullet","incrementListMarker","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","gfmFromMarkdown","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","remarkGfm","castFactory","typeFactory","tests","any","anyFactory","propsFactory","factory","subresult","grandparents","toResult"],"sourceRoot":""}