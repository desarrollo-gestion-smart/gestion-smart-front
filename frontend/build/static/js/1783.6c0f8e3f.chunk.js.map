{"version":3,"file":"static/js/1783.6c0f8e3f.chunk.js","mappings":"qXAEO,SAASA,EAA4BC,GAC1C,OAAOC,EAAAA,EAAAA,IAAqB,kBAAmBD,EACjD,CACA,MACA,GAD4BE,EAAAA,EAAAA,GAAuB,kBAAmB,CAAC,OAAQ,WAAY,YAAa,UAAW,eAAgB,MAAO,eAAgB,gBAAiB,eAAgB,eAAgB,YAAa,QAAS,eAAgB,eAAgB,iBAAkB,iBAAkB,qBAAsB,SAAU,sBAAuB,QAAS,UAAW,UAAW,YAAa,SAAU,aAAc,Y,ICD5ZC,EAAYC,E,iCAChB,MAAMC,EAAY,CAAC,eAAgB,gBAAiB,aAAc,eAAgB,YAAa,YAAa,YAAa,cAAe,gBAAiB,YAAa,YAAa,kBAAmB,eAAgB,mBAAoB,uBAAwB,WAAY,yBAA0B,kBAAmB,gBAAiB,gBAAiB,wBAAyB,iBAAkB,WAAY,YAAa,mBAAoB,oBAAqB,eAAgB,iBAAkB,uBAAwB,UAAW,oBAAqB,KAAM,qBAAsB,aAAc,YAAa,mBAAoB,eAAgB,UAAW,cAAe,WAAY,gBAAiB,WAAY,UAAW,oBAAqB,gBAAiB,SAAU,OAAQ,cAAe,WAAY,UAAW,iBAAkB,kBAAmB,YAAa,WAAY,cAAe,cAAe,eAAgB,aAAc,gBAAiB,OAAQ,YAAa,SACz8BC,EAAa,CAAC,OACdC,EAAa,CAAC,OACdC,EAAa,CAAC,OA2DVC,GAAmBC,EAAAA,EAAAA,IAAO,MAAO,CACrCC,KAAM,kBACNX,KAAM,OACNY,kBAAmBA,CAACC,EAAOC,KACzB,MAAM,WACJC,GACEF,GACE,UACJG,EAAS,aACTC,EAAY,aACZC,EAAY,aACZC,EAAY,KACZC,GACEL,EACJ,MAAO,CAAC,CACN,CAAE,MAAKM,EAAAA,OAA4BP,EAAOQ,KACzC,CACD,CAAE,MAAKD,EAAAA,OAA4BP,EAAQ,WAASS,EAAAA,EAAAA,GAAWH,OAC9D,CACD,CAAE,MAAKC,EAAAA,aAAkCP,EAAOU,WAC/C,CACD,CAAE,MAAKH,EAAAA,SAA8BP,EAAOW,OAC3C,CACD,CAAE,MAAKJ,EAAAA,SAA8BF,GAAgBL,EAAOK,cAC3DL,EAAOY,KAAMV,GAAaF,EAAOE,UAAWE,GAAgBJ,EAAOI,aAAcD,GAAgBH,EAAOG,aAAa,GAxBnGP,CA0BtB,CACD,CAAE,KAAIW,EAAAA,YAAgCA,EAAAA,kBAAuC,CAC3EM,WAAY,WAGd,yBAA0B,CACxB,CAAE,YAAWN,EAAAA,kBAAuC,CAClDM,WAAY,YAGhB,CAAE,MAAKN,EAAAA,OAA4B,CACjCO,OAAQ,EACRC,SAAU,oBAEZ,CAAE,MAAKR,EAAAA,aAAkC,CACvC,CAAE,IAAGA,EAAAA,mBAAuCA,EAAAA,iBAAsC,CAChFS,aAAc,IAEhB,CAAE,IAAGT,EAAAA,gBAAoCA,EAAAA,iBAAsC,CAC7ES,aAAc,IAEhB,CAAE,MAAKT,EAAAA,SAA8B,CACnCU,MAAO,EACPC,SAAU,KAGd,CAAE,MAAKC,EAAAA,EAAAA,QAAsB,CAC3BC,cAAe,EACf,oBAAqB,CACnBC,QAAS,oBAGb,CAAE,MAAKF,EAAAA,EAAAA,QAAqBG,EAAAA,EAAAA,aAA+B,CACzD,CAAE,MAAKH,EAAAA,EAAAA,SAAuB,CAC5BE,QAAS,kBAGb,CAAE,MAAKE,EAAAA,EAAAA,QAA8B,CACnCF,QAAS,EACT,CAAE,IAAGd,EAAAA,mBAAuCA,EAAAA,iBAAsC,CAChFS,aAAc,IAEhB,CAAE,IAAGT,EAAAA,gBAAoCA,EAAAA,iBAAsC,CAC7ES,aAAc,IAEhB,CAAE,MAAKT,EAAAA,SAA8B,CACnCc,QAAS,uBAEX,CAAE,MAAKd,EAAAA,gBAAqC,CAC1CiB,MAAO,IAGX,CAAE,MAAKD,EAAAA,EAAAA,QAA6BD,EAAAA,EAAAA,aAA+B,CAGjEG,WAAY,EACZL,cAAe,EACfM,YAAa,EACb,CAAE,MAAKnB,EAAAA,SAA8B,CACnCc,QAAS,wBAGb,CAAE,MAAKM,EAAAA,EAAAA,QAA4B,CACjCF,WAAY,GACZC,YAAa,EACb,CAAE,IAAGnB,EAAAA,mBAAuCA,EAAAA,iBAAsC,CAChFS,aAAc,IAEhB,CAAE,IAAGT,EAAAA,gBAAoCA,EAAAA,iBAAsC,CAC7ES,aAAc,IAEhB,CAAE,MAAKW,EAAAA,EAAAA,SAA6B,CAClCN,QAAS,WAEX,CAAE,MAAKd,EAAAA,gBAAqC,CAC1CiB,MAAO,IAGX,CAAE,MAAKG,EAAAA,EAAAA,QAA2BL,EAAAA,EAAAA,aAA+B,CAC/DF,cAAe,EACf,CAAE,MAAKO,EAAAA,EAAAA,SAA6B,CAClCN,QAAS,cAGb,CAAE,MAAKC,EAAAA,EAAAA,eAAiC,CACtCG,WAAY,GAEd,CAAE,MAAKE,EAAAA,EAAAA,QAA2BL,EAAAA,EAAAA,eAAiC,CACjEG,WAAY,EACZL,cAAe,EACf,CAAE,MAAKb,EAAAA,SAA8B,CACnCkB,WAAY,GACZL,cAAe,KAGnB,CAAE,MAAKO,EAAAA,EAAAA,QAA2BL,EAAAA,EAAAA,eAAgCA,EAAAA,EAAAA,aAA+B,CAC/F,CAAE,MAAKf,EAAAA,SAA8B,CACnCkB,WAAY,EACZL,cAAe,IAGnB,CAAE,MAAKb,EAAAA,SAA8B,CACnCqB,SAAU,EACVC,aAAc,WACdC,QAAS,GAEXC,SAAU,CAAC,CACThC,MAAO,CACLG,WAAW,GAEb8B,MAAO,CACLf,MAAO,SAER,CACDlB,MAAO,CACLO,KAAM,SAER0B,MAAO,CACL,CAAE,MAAKzB,EAAAA,OAA4B,CACjCO,OAAQ,EACRC,SAAU,sBAGb,CACDhB,MAAO,CACLM,cAAc,GAEhB2B,MAAO,CACL,CAAE,MAAKzB,EAAAA,SAA8B,CACnCuB,QAAS,KAGZ,CACD/B,MAAO,CACLkC,UAAU,GAEZD,MAAO,CACL,CAAE,MAAKzB,EAAAA,aAAkC,CACvC2B,SAAU,aAKZC,GAA2BvC,EAAAA,EAAAA,IAAO,MAAO,CAC7CC,KAAM,kBACNX,KAAM,eACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOoC,cAHdxC,CAI9B,CAEDyC,SAAU,WACVb,MAAO,EACPc,IAAK,MACLC,UAAW,uBAEPC,GAA6B5C,EAAAA,EAAAA,IAAO6C,EAAAA,EAAY,CACpD5C,KAAM,kBACNX,KAAM,iBACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAO0C,gBAHZ9C,CAIhC,CACD+C,aAAc,EACdtB,QAAS,EACTR,WAAY,WAER+B,GAA6BhD,EAAAA,EAAAA,IAAO6C,EAAAA,EAAY,CACpD5C,KAAM,kBACNX,KAAM,iBACNY,kBAAmBA,CAAA+C,EAEhB7C,KAAM,IAFW,WAClBC,GACD4C,EAAA,OAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAG9C,EAAO+C,eAAgB9C,EAAW+C,WAAahD,EAAOiD,mBAAmB,GALnErD,CAMhC,CACDyB,QAAS,EACTsB,aAAc,EACdZ,SAAU,CAAC,CACThC,MAAO,CACLiD,WAAW,GAEbhB,MAAO,CACLO,UAAW,sBAIXW,GAAqBtD,EAAAA,EAAAA,IAAOuD,EAAAA,EAAQ,CACxCtD,KAAM,kBACNX,KAAM,SACNY,kBAAmBA,CAACC,EAAOC,KACzB,MAAM,WACJC,GACEF,EACJ,MAAO,CAAC,CACN,CAAE,MAAKQ,EAAAA,UAA+BP,EAAOoD,QAC5CpD,EAAOqD,OAAQpD,EAAWqD,eAAiBtD,EAAOuD,oBAAoB,GATlD3D,EAWxB4D,IAAA,IAAC,MACFC,GACDD,EAAA,MAAM,CACLE,QAASD,EAAME,MAAQF,GAAOC,OAAOE,MACrC7B,SAAU,CAAC,CACThC,MAAO,CACLuD,eAAe,GAEjBtB,MAAO,CACLK,SAAU,cAGf,IACKwB,GAAoBjE,EAAAA,EAAAA,IAAOkE,EAAAA,EAAO,CACtCjE,KAAM,kBACNX,KAAM,QACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAO+D,OAHrBnE,EAIvBoE,IAAA,IAAC,MACFP,GACDO,EAAA,OAAKlB,EAAAA,EAAAA,GAAS,CAAC,EAAGW,EAAMQ,WAAWC,MAAO,CACzCC,SAAU,QACV,IACIC,GAAsBxE,EAAAA,EAAAA,IAAO,MAAO,CACxCC,KAAM,kBACNX,KAAM,UACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOqE,SAHnBzE,EAIzB0E,IAAA,IAAC,MACFb,GACDa,EAAA,MAAM,CACLC,OAAQd,EAAME,MAAQF,GAAOe,QAAQC,KAAKC,UAC1CrD,QAAS,YACV,IACKsD,GAAwB/E,EAAAA,EAAAA,IAAO,MAAO,CAC1CC,KAAM,kBACNX,KAAM,YACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAO4E,WAHjBhF,EAI3BiF,IAAA,IAAC,MACFpB,GACDoB,EAAA,MAAM,CACLN,OAAQd,EAAME,MAAQF,GAAOe,QAAQC,KAAKC,UAC1CrD,QAAS,YACV,IACKyD,GAAsBlF,EAAAA,EAAAA,IAAO,MAAO,CACxCC,KAAM,kBACNX,KAAM,UACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAO+E,SAHnBnF,EAIzBoF,IAAA,IAAC,MACFvB,GACDuB,EAAA,MAAM,CACLC,UAAW,OACXnE,OAAQ,EACRO,QAAS,QACT6D,UAAW,OACXf,SAAU,OACV9B,SAAU,WACV,CAAE,MAAK9B,EAAAA,UAA+B,CACpC4E,UAAW,GACXC,QAAS,OACTjB,SAAU,SACVkB,eAAgB,aAChBC,WAAY,SACZC,OAAQ,UACR9D,WAAY,EACZ+D,UAAW,aACXC,QAAS,IACTC,wBAAyB,cACzBtE,cAAe,EACfM,YAAa,GACbV,aAAc,GACd,CAACyC,EAAMkC,YAAYC,GAAG,OAAQ,CAC5BT,UAAW,QAEb,CAAE,KAAI5E,EAAAA,WAAgC,CACpCsF,iBAAkBpC,EAAME,MAAQF,GAAOe,QAAQsB,OAAOC,MAEtD,uBAAwB,CACtBF,gBAAiB,gBAGrB,0BAA2B,CACzB/D,SAAU2B,EAAME,MAAQF,GAAOe,QAAQsB,OAAOE,gBAC9CC,cAAe,QAEjB,CAAE,KAAI1F,EAAAA,gBAAqC,CACzCsF,iBAAkBpC,EAAME,MAAQF,GAAOe,QAAQsB,OAAOI,OAExD,0BAA2B,CACzBL,gBAAiBpC,EAAME,KAAQ,QAAOF,EAAME,KAAKa,QAAQ2B,QAAQC,iBAAiB3C,EAAME,KAAKa,QAAQsB,OAAOO,oBAAqBC,EAAAA,EAAAA,IAAM7C,EAAMe,QAAQ2B,QAAQI,KAAM9C,EAAMe,QAAQsB,OAAOO,iBACxL,CAAE,KAAI9F,EAAAA,WAAgC,CACpCsF,gBAAiBpC,EAAME,KAAQ,QAAOF,EAAME,KAAKa,QAAQ2B,QAAQC,sBAAsB3C,EAAME,KAAKa,QAAQsB,OAAOO,qBAAqB5C,EAAME,KAAKa,QAAQsB,OAAOU,kBAAmBF,EAAAA,EAAAA,IAAM7C,EAAMe,QAAQ2B,QAAQI,KAAM9C,EAAMe,QAAQsB,OAAOO,gBAAkB5C,EAAMe,QAAQsB,OAAOU,cAEjR,uBAAwB,CACtBX,iBAAkBpC,EAAME,MAAQF,GAAOe,QAAQsB,OAAOW,WAG1D,CAAE,KAAIlG,EAAAA,gBAAqC,CACzCsF,gBAAiBpC,EAAME,KAAQ,QAAOF,EAAME,KAAKa,QAAQ2B,QAAQC,sBAAsB3C,EAAME,KAAKa,QAAQsB,OAAOO,qBAAqB5C,EAAME,KAAKa,QAAQsB,OAAOY,kBAAmBJ,EAAAA,EAAAA,IAAM7C,EAAMe,QAAQ2B,QAAQI,KAAM9C,EAAMe,QAAQsB,OAAOO,gBAAkB5C,EAAMe,QAAQsB,OAAOY,iBAIxR,IACKC,GAAyB/G,EAAAA,EAAAA,IAAOgH,EAAAA,EAAe,CACnD/G,KAAM,kBACNX,KAAM,aACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAO6G,YAHhBjH,EAI5BkH,IAAA,IAAC,MACFrD,GACDqD,EAAA,MAAM,CACLjB,iBAAkBpC,EAAME,MAAQF,GAAOe,QAAQuC,WAAWhD,MAC1DzB,KAAM,EACP,IACK0E,GAAsBpH,EAAAA,EAAAA,IAAO,KAAM,CACvCC,KAAM,kBACNX,KAAM,UACNY,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOiH,SAHnBrH,CAIzB,CACDyB,QAAS,EACT,CAAE,MAAKd,EAAAA,UAA+B,CACpCmB,YAAa,MA+tBjB,EA3tBkCwF,EAAAA,YAAiB,SAAsBC,EAASC,GAChF,IAAIC,EAAuBC,EAAkBC,EAAmBC,EAChE,MAAMzH,GAAQ0H,EAAAA,EAAAA,GAAgB,CAC5B1H,MAAOoH,EACPtH,KAAM,qBAIF,aACF6H,GAAe,EAAK,cACpBC,GAAgB,EAAK,WACrBC,GAAa,EAAK,aAClBC,GAAe,EAAK,UACpBC,EAAS,UACTC,EAAS,UACTC,EAAY3I,IAAeA,GAA0B4I,EAAAA,EAAAA,KAAKC,EAAAA,EAAW,CACnEC,SAAU,WACT,YACHC,GAAerI,EAAMsI,SAAQ,cAC7BC,GAAgB,EAAK,UACrBC,EAAY,QAAO,UACnBC,EAAY,QAAO,gBACnBC,EAAkB,CAAC,EAAC,aACpBC,GAAe3I,EAAMkC,SAAW,GAAK,MAAI,iBACzC0G,GAAmB,EAAK,qBACxBC,IAAuB,EAAK,SAC5BC,IAAW,EAAK,uBAChBC,IAAyB,EAAK,gBAC9BC,IAAkB,EAAK,cACvBzF,IAAgB,EAAK,sBACrB0F,IAAwB,EAAK,eAC7BC,GAAiB,OAAM,SACvBZ,IAAW,EAAK,UAChBnI,IAAY,EAAK,iBACjBgJ,GAAmBC,IAAS,IAAGA,KAC/BC,eAAgBC,GAAkB,QAClCC,GAAO,kBACPC,IAAqBxJ,EAAMsI,SAAQ,mBACnCmB,IAAqB,EAAK,UAC1BC,IAAY,EAAE,iBACdC,GAAmB,KAAI,aACvBC,GAAY,QACZtF,IAAU,EAAK,YACfuF,GAAc,gBAAU,SACxB3H,IAAW,EAAK,cAChB4H,GAAgB,aAAY,YAC5BC,IAAc,EAAK,SACnBC,GAAW,OAAM,eACjBC,GAAiBlG,EAAAA,EAAK,gBACtBmG,GAAkB9G,EAAAA,EAAM,UACxB+G,GAAY5K,IAAuBA,GAAkC2I,EAAAA,EAAAA,KAAKkC,EAAAA,EAAmB,CAAC,IAAG,SACjGC,IAAW,EACXC,YAAaC,GAAe,YAC5BC,GACAC,aAAcC,GAAgB,WAC9BC,GAAU,cACVC,IAAiB5K,EAAMsI,SAAQ,KAC/B/H,GAAO,SAAQ,UACfsK,GAAY,CAAC,GACX7K,EACJ8K,IAAQC,EAAAA,EAAAA,GAA8B/K,EAAOR,IAGzC,aACJwL,GAAY,cACZC,GAAa,mBACbC,GAAkB,uBAClBC,GAAsB,cACtBC,GAAa,YACbC,GAAW,gBACXC,GAAe,eACfC,GAAc,MACdC,GAAK,MACLC,GAAK,SACLC,GAAQ,GACRC,GAAE,UACF1I,GAAS,QACT2I,GAAO,WACPC,GAAU,SACVC,GAAQ,YACRC,GAAW,WACXC,GAAU,eACVC,KACEC,EAAAA,EAAAA,IAAgBnJ,EAAAA,EAAAA,GAAS,CAAC,EAAG/C,EAAO,CACtCmM,cAAe,kBAEX/L,IAAgBwI,IAAqBE,IAAY2C,KAAUpB,GAC3DhK,KAAiBiI,KAA+B,IAAnBY,MAA+C,IAAnBA,IAE7DkD,YAAaC,IACXpB,MAEF5D,IAAKiF,IACa,MAAhB1C,GAAuBA,GAAe,CAAC,EACrC2C,GAAmBjB,MAErBjE,IAAKmF,IACHD,GACJE,IAAoB1B,EAAAA,EAAAA,GAA8BwB,GAAkB9M,GAChEiN,IAAqBC,EAAAA,EAAAA,GAAWH,GAAYF,IAK5CjD,GAAiBC,IAJOjG,KAC5B,IAAIuJ,EACJ,OAAyC,OAAjCA,EAAgBvJ,EAAOwJ,OAAiBD,EAAgBvJ,CAAM,GAKlEnD,IAAa6C,EAAAA,EAAAA,GAAS,CAAC,EAAG/C,EAAO,CACrCuD,iBACAmI,YACAE,WACAzL,aACAkJ,kBACAjJ,gBACAC,gBACAC,cAA8B,IAAhBuL,GACd5I,aACA1C,UAEIuM,GA3ekB5M,KACxB,MAAM,QACJ4M,EAAO,cACPvJ,EAAa,SACbmI,EAAQ,QACRE,EAAO,UACPzL,EAAS,aACTC,EAAY,aACZC,EAAY,aACZC,EAAY,UACZ2C,EAAS,KACT1C,GACEL,EACE6M,EAAQ,CACZlM,KAAM,CAAC,OAAQ6K,GAAY,WAAYE,GAAW,UAAWzL,GAAa,YAAaC,GAAgB,eAAgBC,GAAgB,gBACvIM,UAAW,CAAC,aACZC,MAAO,CAAC,QAASN,GAAgB,gBACjCG,IAAK,CAAC,MAAQ,WAASC,EAAAA,EAAAA,GAAWH,MAClC8B,aAAc,CAAC,gBACfM,eAAgB,CAAC,kBACjBK,eAAgB,CAAC,iBAAkBC,GAAa,sBAChDK,OAAQ,CAAC,SAAUC,GAAiB,uBACpCS,MAAO,CAAC,SACRgB,QAAS,CAAC,WACVV,QAAS,CAAC,WACVO,UAAW,CAAC,aACZxB,OAAQ,CAAC,UACTyD,WAAY,CAAC,cACbI,QAAS,CAAC,YAEZ,OAAO8F,EAAAA,EAAAA,GAAeD,EAAO7N,EAA6B4N,EAAQ,EA6clDG,CAAkB/M,IAClC,IAAIgN,GACJ,GAAIhL,IAAYsJ,GAAM2B,OAAS,EAAG,CAChC,MAAMC,EAAwBC,IAAUtK,EAAAA,EAAAA,GAAS,CAC/CiF,UAAW8E,GAAQrM,IACnBqI,aACCuC,GAAYgC,IAEbH,GADEvC,GACeA,GAAWa,GAAO4B,EAAuBlN,IAEzCsL,GAAM8B,KAAI,CAACjK,EAAQkK,KAClC,MAAMC,EAAwBJ,EAAsB,CAChDG,WAEF,IACEE,GACED,EACJE,GAAiB3C,EAAAA,EAAAA,GAA8ByC,EAAuB9N,GACxE,OAAoBwI,EAAAA,EAAAA,KAAKyF,EAAAA,GAAM5K,EAAAA,EAAAA,GAAS,CACtC8J,MAAOxD,GAAehG,GACtB9C,KAAMA,IACLmN,EAAgB3F,GAAY0F,EAAI,GAGzC,CACA,GAAI/D,IAAa,GAAKkE,MAAMC,QAAQX,IAAiB,CACnD,MAAM9D,EAAO8D,GAAeC,OAASzD,IAChCkC,IAAWxC,EAAO,IACrB8D,GAAiBA,GAAeY,OAAO,EAAGpE,IAC1CwD,GAAea,MAAmB7F,EAAAA,EAAAA,KAAK,OAAQ,CAC7CF,UAAW8E,GAAQrM,IACnBuN,SAAU7E,GAAiBC,IAC1B8D,GAAeC,SAEtB,CACA,MAYM7C,GAAcC,IAZO8C,KAAuBY,EAAAA,EAAAA,MAAM,KAAM,CAC5DD,SAAU,EAAc9F,EAAAA,EAAAA,KAAKtB,EAAwB,CACnDoB,UAAW8E,GAAQhG,WACnB5G,WAAYA,GACZgO,UAAW,MACXF,SAAUX,EAAOc,SACFjG,EAAAA,EAAAA,KAAKjB,EAAqB,CACzCe,UAAW8E,GAAQ5F,QACnBhH,WAAYA,GACZ8N,SAAUX,EAAOW,aAElBX,EAAOI,MAYJhD,GAAeC,IAVO0D,EAACC,EAAQhL,KAEnC,MAAM,IACFoK,GACEY,EACJC,GAAavD,EAAAA,EAAAA,GAA8BsD,EAAQ1O,GACrD,OAAoBuI,EAAAA,EAAAA,KAAK,MAAMnF,EAAAA,EAAAA,GAAS,CAAC,EAAGuL,EAAY,CACtDN,SAAU3E,GAAehG,KACvBoK,EAAI,GAGJc,GAAmBA,CAAClL,EAAQkK,KAChC,MAAMiB,EAAcjD,GAAe,CACjClI,SACAkK,UAEF,OAAO9C,IAAa1H,EAAAA,EAAAA,GAAS,CAAC,EAAGyL,EAAa,CAC5CxG,UAAW8E,GAAQzJ,SACjBA,EAAQ,CACVqD,SAAU8H,EAAY,iBACtBjB,QACAvB,eACC9L,GAAW,EAEVuO,GAAgF,OAArDnH,EAAwBuD,GAAUlI,gBAA0B2E,EAAwBoB,EAAgB/F,eAC/H+L,GAAyD,OAAvCnH,EAAmBsD,GAAU7G,OAAiBuD,EAAmBmB,EAAgB1E,MACnG2K,GAA4D,OAAzCnH,EAAoBqD,GAAUvH,QAAkBkE,EAAoBkB,EAAgBpF,OACvGsL,GAAgF,OAArDnH,EAAwBoD,GAAU7H,gBAA0ByE,EAAwBiB,EAAgB1F,eAC/H6L,GAAmCb,IAAyB9F,EAAAA,EAAAA,KAAK/E,GAAoBJ,EAAAA,EAAAA,GAAS,CAClG+L,GAAI5E,GACJ3G,cAAeA,GACftB,MAAO,CACLf,MAAO4K,GAAWA,GAASiD,YAAc,MAE3C7O,WAAYA,GACZ8O,KAAM,eACNlD,SAAUA,GACVmD,KAAMhM,IACL0L,GAAiB,CAClB3G,WAAWkH,EAAAA,EAAAA,GAAKpC,GAAQxJ,OAA2B,MAAnBqL,QAA0B,EAASA,GAAgB3G,WACnFgG,UAAuB9F,EAAAA,EAAAA,KAAKpE,GAAmBf,EAAAA,EAAAA,GAAS,CACtD7C,WAAYA,GACZ4O,GAAI7E,IACHyE,GAAgB,CACjB1G,WAAWkH,EAAAA,EAAAA,GAAKpC,GAAQ9I,MAAyB,MAAlB0K,QAAyB,EAASA,GAAe1G,WAChFgG,SAAUA,QAGd,IAAImB,GAAqB,KAqCzB,OApCIlD,GAAekB,OAAS,EAC1BgC,GAAqBN,IAA+C3G,EAAAA,EAAAA,KAAKnD,GAAqBhC,EAAAA,EAAAA,GAAS,CACrG+L,GAAInF,GACJ3B,UAAW8E,GAAQ9H,QACnB9E,WAAYA,IACXuM,GAAmB7C,GAAc,CAClCvC,IAAKqF,GACLsB,SAAU/B,GAAeqB,KAAI,CAACjK,EAAQkK,IAChChE,GACKe,GAAY,CACjBmD,IAAKpK,EAAOoK,IACZU,MAAO9K,EAAO8K,MACdH,SAAU3K,EAAO+L,QAAQ9B,KAAI,CAAC+B,EAASC,IAAWf,GAAiBc,EAAShM,EAAOkK,MAAQ+B,OAGxFf,GAAiBlL,EAAQkK,SAG3BjJ,IAAqC,IAA1B2H,GAAekB,OACnCgC,GAAqBN,IAA+C3G,EAAAA,EAAAA,KAAK7D,EAAqB,CAC5F2D,UAAW8E,GAAQxI,QACnBpE,WAAYA,GACZ8N,SAAUnE,MAEuB,IAA1BoC,GAAekB,QAAiB7E,IAAahE,KACtD6K,GAAqBN,IAA+C3G,EAAAA,EAAAA,KAAKtD,EAAuB,CAC9FoD,UAAW8E,GAAQjI,UACnB3E,WAAYA,GACZ8O,KAAM,eACN5C,YAAamD,IAEXA,EAAMC,gBAAgB,EAExBxB,SAAUlE,QAGMmE,EAAAA,EAAAA,MAAM9G,EAAAA,SAAgB,CACxC6G,SAAU,EAAc9F,EAAAA,EAAAA,KAAKtI,GAAkBmD,EAAAA,EAAAA,GAAS,CACtDsE,IAAKA,EACLW,WAAWkH,EAAAA,EAAAA,GAAKpC,GAAQjM,KAAMmH,GAC9B9H,WAAYA,IACX8K,GAAaF,IAAQ,CACtBkD,SAAUxD,GAAY,CACpBmB,MACA7C,YACA3I,WAAW,EACXI,KAAe,UAATA,GAAmB,aAAUkP,EACnCC,gBAAiBxE,KACjByE,YAAY5M,EAAAA,EAAAA,GAAS,CACnBsE,IAAK0E,GACL/D,UAAW8E,GAAQnM,UACnBuM,kBACA0C,QAASL,IACHA,EAAMM,SAAWN,EAAMO,eACzBzD,GAAqBkD,EACvB,IAEAnP,IAAgBC,KAAiB,CACnCgC,cAA2B4L,EAAAA,EAAAA,MAAM7L,EAA0B,CACzD4F,UAAW8E,GAAQzK,aACnBnC,WAAYA,GACZ8N,SAAU,CAAC5N,IAA4B8H,EAAAA,EAAAA,KAAKzF,GAA4BM,EAAAA,EAAAA,GAAS,CAAC,EAAGqI,KAAiB,CACpG,aAAc5C,EACduH,MAAOvH,EACPtI,WAAYA,IACXuO,GAAyB,CAC1BzG,WAAWkH,EAAAA,EAAAA,GAAKpC,GAAQnK,eAA2C,MAA3B8L,QAAkC,EAASA,GAAwBzG,WAC3GgG,SAAU/F,KACN,KAAM5H,IAA4B6H,EAAAA,EAAAA,KAAKrF,GAA4BE,EAAAA,EAAAA,GAAS,CAAC,EAAGoI,KAA0B,CAC9GrC,SAAUA,GACV,aAAc7F,GAAYwF,EAAYuB,GACtC+F,MAAO9M,GAAYwF,EAAYuB,GAC/B9J,WAAYA,IACX0O,GAAyB,CAC1B5G,WAAWkH,EAAAA,EAAAA,GAAKpC,GAAQ9J,eAA2C,MAA3B4L,QAAkC,EAASA,GAAwB5G,WAC3GgG,SAAU7D,MACN,UAGV6F,YAAYjN,EAAAA,EAAAA,GAAS,CACnBiF,UAAW8E,GAAQlM,MACnBkI,YACAuB,aACCY,WAEFa,GAAWqD,GAAqB,OAEzC,G,qJCpsBO,SAASc,EAA6B9Q,GAC3C,OAAOC,EAAAA,EAAAA,IAAqB,mBAAoBD,EAClD,EAC6BE,EAAAA,EAAAA,GAAuB,mBAAoB,CAAC,OAAQ,eAAgB,eAAgB,UAAW,QAAS,W,eCDrI,MAAMG,EAAY,CAAC,YAAa,QAAS,YAAa,iBAAkB,gBAAiB,SAuBnF0Q,GAAoBrQ,EAAAA,EAAAA,IAAO,KAAM,CACrCC,KAAM,mBACNX,KAAM,OACNY,kBAAmBA,CAACC,EAAOC,KACzB,MAAM,WACJC,GACEF,EACJ,MAAO,CAACC,EAAOY,KAA2B,YAArBX,EAAWsE,OAAuBvE,EAAQ,SAAOS,EAAAA,EAAAA,GAAWR,EAAWsE,WAAYtE,EAAWiQ,gBAAkBlQ,EAAOmQ,QAASlQ,EAAWmQ,OAASpQ,EAAOoQ,OAAQnQ,EAAWoQ,eAAiBrQ,EAAOsQ,OAAO,GAP5M1Q,EASvBiD,IAAA,IAAC,MACFY,EAAK,WACLxD,GACD4C,EAAA,OAAKC,EAAAA,EAAAA,GAAS,CACb0C,UAAW,aACX+K,WAAY,OACZtL,UAAW,OACXV,OAAQd,EAAME,MAAQF,GAAOe,QAAQC,KAAKC,UAC1C8L,WAAY/M,EAAMQ,WAAWuM,WAC7BC,WAAYhN,EAAMQ,WAAWyM,iBAC7BvI,SAAU1E,EAAMQ,WAAW0M,QAAQ,KACb,YAArB1Q,EAAWsE,OAAuB,CACnCA,OAAQd,EAAME,MAAQF,GAAOe,QAAQ2B,QAAQI,MACvB,YAArBtG,EAAWsE,OAAuB,CACnCA,MAAO,YACLtE,EAAWiQ,gBAAkB,CAC/BxO,YAAa,GACbV,aAAc,IACbf,EAAWmQ,OAAS,CACrB1O,YAAa,KACXzB,EAAWoQ,eAAiB,CAC9BhO,SAAU,SACVC,IAAK,EACLoB,OAAQ,EACRmC,iBAAkBpC,EAAME,MAAQF,GAAOe,QAAQuC,WAAWhD,OAC1D,IACI6C,EAA6BM,EAAAA,YAAiB,SAAuBC,EAASC,GAClF,MAAMrH,GAAQ0H,EAAAA,EAAAA,GAAgB,CAC5B1H,MAAOoH,EACPtH,KAAM,sBAEF,UACFkI,EAAS,MACTxD,EAAQ,UAAS,UACjB0J,EAAY,KAAI,eAChBiC,GAAiB,EAAK,cACtBG,GAAgB,EAAK,MACrBD,GAAQ,GACNrQ,EACJ8K,GAAQC,EAAAA,EAAAA,GAA8B/K,EAAOR,GACzCU,GAAa6C,EAAAA,EAAAA,GAAS,CAAC,EAAG/C,EAAO,CACrCwE,QACA0J,YACAiC,iBACAG,gBACAD,UAEIvD,EArEkB5M,KACxB,MAAM,QACJ4M,EAAO,MACPtI,EAAK,eACL2L,EAAc,MACdE,EAAK,cACLC,GACEpQ,EACE6M,EAAQ,CACZlM,KAAM,CAAC,OAAkB,YAAV2D,GAAwB,SAAO9D,EAAAA,EAAAA,GAAW8D,MAAW2L,GAAkB,UAAWE,GAAS,SAAUC,GAAiB,WAEvI,OAAOtD,EAAAA,EAAAA,GAAeD,EAAOkD,EAA8BnD,EAAQ,EA0DnDG,CAAkB/M,GAClC,OAAoBgI,EAAAA,EAAAA,KAAKgI,GAAmBnN,EAAAA,EAAAA,GAAS,CACnD+L,GAAIZ,EACJlG,WAAWkH,EAAAA,EAAAA,GAAKpC,EAAQjM,KAAMmH,GAC9BX,IAAKA,EACLnH,WAAYA,GACX4K,GACL,IACAjE,EAAcgK,sBAAuB,EAgDrC,S,2HClIA,SAASC,EAAgBC,GACvB,MAAmC,qBAArBA,EAAOC,UAA4BD,EAAOC,UAAU,OAAOC,QAAQ,mBAAoB,IAAMF,CAC7G,CACO,SAASG,IAAiC,IAAbC,EAAMC,UAAAjE,OAAA,QAAAsC,IAAA2B,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5C,MAAM,cACJC,GAAgB,EAAI,WACpBC,GAAa,EAAI,MACjBC,EAAK,UACLC,EAAY,MAAK,UACjBC,EAAS,KACTC,GAAO,GACLP,EACJ,MAAO,CAAC/B,EAAOtM,KAGT,IAHW,WACfkJ,EAAU,eACV3C,GACDvG,EACKlC,EAAQ8Q,EAAO1F,EAAW0F,OAAS1F,EACnCsF,IACF1Q,EAAQA,EAAM+Q,eAEZN,IACFzQ,EAAQkQ,EAAgBlQ,IAE1B,MAAMgR,EAAmBhR,EAAkBwO,EAAQyC,QAAOxO,IACxD,IAAIyO,GAAaL,GAAapI,GAAgBhG,GAO9C,OANIiO,IACFQ,EAAYA,EAAUH,eAEpBN,IACFS,EAAYhB,EAAgBgB,IAET,UAAdN,EAAqD,IAA7BM,EAAUC,QAAQnR,GAAekR,EAAUC,QAAQnR,IAAU,CAAC,IAR9DwO,EAUjC,MAAwB,kBAAVmC,EAAqBK,EAAgBI,MAAM,EAAGT,GAASK,CAAe,CAExF,CAGA,SAASK,EAAUC,EAAOC,GACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAM/E,OAAQiF,GAAK,EACrC,GAAID,EAAKD,EAAME,IACb,OAAOA,EAGX,OAAQ,CACV,CACA,MAAMC,EAAuBnB,IAIvBoB,EAAkC9F,IACtC,IAAI+F,EACJ,OAA8B,OAAvB/F,EAAWgG,UAAmF,OAA7DD,EAAwB/F,EAAWgG,QAAQC,oBAAyB,EAASF,EAAsBG,SAASC,SAASC,eAAe,EAs6B9K,QAp6BA,SAAyB5S,GACvB,MAAM,kCAEJ6S,EAAoCP,EAA+B,yBAEnEQ,EAA2B,MAAK,aAChCnL,GAAe,EAAK,cACpBC,GAAgB,EAAK,WACrBC,GAAa,EAAK,aAClBC,GAAe,EAAK,YACpBO,GAAerI,EAAMsI,SAAQ,cAC7BC,GAAgB,EAAK,cACrB4D,EAAgB,kBAAiB,aACjCxD,GAAe3I,EAAMkC,SAAW,GAAK,MAAI,iBACzC0G,GAAmB,EAAK,qBACxBC,GAAuB,EACvBC,SAAUiK,EAAY,uBACtBhK,GAAyB,EAAK,gBAC9BC,GAAkB,EAAK,cACvBgK,EAAgBX,EAAoB,sBACpCpJ,GAAwB,EAAK,SAC7BX,GAAW,EAAK,kBAChB2K,EAAiB,aACjBC,EACA7J,eAAgBC,EAAqBjG,KACnC,IAAIuJ,EACJ,OAAyC,OAAjCA,EAAgBvJ,EAAOwJ,OAAiBD,EAAgBvJ,CAAM,GACvE,QACDkG,EAAO,kBACPC,GAAqBxJ,EAAMsI,SAC3BqD,GAAIwH,EAAM,mBACV1J,GAAqB,EACrBuC,WAAYoH,EAAc,qBAC1BC,EAAuBA,EAAChQ,EAAQmI,IAAUnI,IAAWmI,GAAK,SAC1DtJ,GAAW,EAAK,SAChBoR,EAAQ,QACRC,EAAO,kBACPC,EAAiB,cACjBC,EAAa,OACbC,EACAzE,KAAM0E,EAAQ,YACd5J,GAAc,EAAK,QACnBqF,EAAO,SACP/E,GAAW,EAAK,cAChBO,GAAiB5K,EAAMsI,SACvBkD,MAAOoI,GACL5T,EACE2L,GAAKkI,EAAAA,EAAAA,GAAMV,GACjB,IAAI9J,EAAiBC,EACrBD,EAAiBhG,IACf,MAAMyQ,EAAcxK,EAAmBjG,GACvC,MAA2B,kBAAhByQ,EAKFC,OAAOD,GAETA,CAAW,EAEpB,MAAME,EAAc7M,EAAAA,QAAa,GAC3B8M,EAAa9M,EAAAA,QAAa,GAC1B+M,GAAW/M,EAAAA,OAAa,MACxBqF,GAAarF,EAAAA,OAAa,OACzB2E,GAAUC,IAAe5E,EAAAA,SAAe,OACxC0E,GAAYsI,IAAiBhN,EAAAA,UAAgB,GAC9CiN,GAAqBxM,EAAgB,GAAK,EAC1CyM,GAAsBlN,EAAAA,OAAaiN,KAClC5I,GAAO8I,KAAiBC,EAAAA,EAAAA,GAAc,CAC3CC,WAAYZ,EACZa,QAAS9L,EACT7I,KAAMqM,KAEDH,GAAY0I,KAAsBH,EAAAA,EAAAA,GAAc,CACrDC,WAAYpB,EACZqB,QAAS,GACT3U,KAAMqM,EACNwI,MAAO,gBAEF/I,GAASgJ,IAAczN,EAAAA,UAAe,GACvC0N,GAAkB1N,EAAAA,aAAkB,CAACoI,EAAOuF,KAIhD,KADyB5S,EAAWsJ,GAAM2B,OAAS2H,EAAS3H,OAAsB,OAAb2H,KAC3CzM,EACxB,OAEF,IAAI0M,EACJ,GAAI7S,EACF6S,EAAgB,QACX,GAAgB,MAAZD,EACTC,EAAgB,OACX,CACL,MAAMjB,EAAczK,EAAeyL,GACnCC,EAAuC,kBAAhBjB,EAA2BA,EAAc,EAClE,CACI9H,KAAe+I,IAGnBL,GAAmBK,GACftB,GACFA,EAAclE,EAAOwF,EAAe,SACtC,GACC,CAAC1L,EAAgB2C,GAAY9J,EAAUuR,EAAeiB,GAAoBrM,EAAamD,MACnFyD,GAAM+F,KAAgBT,EAAAA,EAAAA,GAAc,CACzCC,WAAYb,EACZc,SAAS,EACT3U,KAAMqM,EACNwI,MAAO,UAEFM,GAAeC,IAAoB/N,EAAAA,UAAe,GACnDgO,IAA6BjT,GAAqB,MAATsJ,IAAiBQ,KAAe3C,EAAemC,IACxFvI,GAAYgM,KAAS5E,EACrBuH,GAAkB3O,GAAY+P,EAAc5D,EAAQyC,QAAOxO,IAC3D4F,KAA0B/G,EAAWsJ,GAAQ,CAACA,KAAQ4J,MAAKC,GAAqB,OAAXA,GAAmBhC,EAAqBhQ,EAAQgS,OAO3H,CACErJ,WAAYmJ,IAA6BF,GAAgB,GAAKjJ,GAC9D3C,mBACG,GACCiM,IAAgBC,EAAAA,EAAAA,GAAiB,CACrC3D,mBACApG,SACAQ,gBAEF7E,EAAAA,WAAgB,KACd,MAAMqO,EAAchK,KAAU8J,GAAc9J,MACxCI,KAAY4J,GAKZlN,IAAakN,GAGjBX,GAAgB,KAAMrJ,GAAM,GAC3B,CAACA,GAAOqJ,GAAiBjJ,GAAS0J,GAAc9J,MAAOlD,IAC1D,MAAMmN,GAAmBxG,IAAQ2C,GAAgBzE,OAAS,IAAM9C,EAS1DqL,IAAWC,EAAAA,EAAAA,IAAiBC,KACZ,IAAhBA,EACF1B,GAAS1B,QAAQrM,QAEjB2F,GAAS+J,cAAe,oBAAmBD,OAAgBzP,OAC7D,IAIFgB,EAAAA,WAAgB,KACVjF,GAAY2J,GAAaL,GAAM2B,OAAS,IAC1CgH,IAAe,GACfuB,IAAU,GACZ,GACC,CAAClK,GAAOtJ,EAAU2J,GAAY6J,KA+BjC,MAAMI,IAAsBH,EAAAA,EAAAA,IAAiBlS,IAIvC,IAJwC,MAC5C8L,EAAK,MACLhC,EAAK,OACLwI,EAAS,QACVtS,EAYC,GAXA4Q,GAAoB7B,QAAUjF,GAGf,IAAXA,EACF2G,GAAS1B,QAAQwD,gBAAgB,yBAEjC9B,GAAS1B,QAAQyD,aAAa,wBAA0B,GAAEtK,YAAa4B,KAErEiG,GACFA,EAAkBjE,GAAkB,IAAXhC,EAAe,KAAOqE,GAAgBrE,GAAQwI,IAEpEvJ,GAAWgG,QACd,OAEF,MAAM0D,EAAO1J,GAAWgG,QAAQqD,cAAe,mBAAkB/C,aAC7DoD,IACFA,EAAKC,UAAUC,OAAQ,GAAEtD,aACzBoD,EAAKC,UAAUC,OAAQ,GAAEtD,mBAE3B,IAAIuD,EAAc7J,GAAWgG,QAM7B,GALgD,YAA5ChG,GAAWgG,QAAQ8D,aAAa,UAClCD,EAAc7J,GAAWgG,QAAQC,cAAcoD,cAAc,sBAI1DQ,EACH,OAEF,IAAe,IAAX9I,EAEF,YADA8I,EAAYE,UAAY,GAG1B,MAAMlT,EAASmJ,GAAWgG,QAAQqD,cAAe,uBAAsBtI,OACvE,GAAKlK,IAGLA,EAAO8S,UAAUK,IAAK,GAAE1D,aACT,aAAXiD,GACF1S,EAAO8S,UAAUK,IAAK,GAAE1D,kBAQtBuD,EAAYI,aAAeJ,EAAYK,cAA2B,UAAXX,GAAiC,UAAXA,GAAoB,CACnG,MAAMY,EAAUtT,EACVuT,EAAeP,EAAYK,aAAeL,EAAYE,UACtDM,EAAgBF,EAAQG,UAAYH,EAAQI,aAC9CF,EAAgBD,EAClBP,EAAYE,UAAYM,EAAgBR,EAAYK,aAC3CC,EAAQG,UAAYH,EAAQI,cAAgBxN,EAAU,IAAM,GAAK8M,EAAYE,YACtFF,EAAYE,UAAYI,EAAQG,UAAYH,EAAQI,cAAgBxN,EAAU,IAAM,GAExF,KAEIyN,IAAyBrB,EAAAA,EAAAA,IAAiB1R,IAK1C,IAL2C,MAC/CsL,EAAK,KACL0H,EAAI,UACJC,EAAY,OAAM,OAClBnB,EAAS,QACV9R,EACC,IAAKhB,GACH,OAEF,MAgCMkU,EArIR,SAA0B5J,EAAO2J,GAC/B,IAAK1K,GAAWgG,SAAWjF,EAAQ,GAAKA,GAASqE,GAAgBzE,OAC/D,OAAQ,EAEV,IAAIiK,EAAY7J,EAChB,OAAa,CACX,MAAMlK,EAASmJ,GAAWgG,QAAQqD,cAAe,uBAAsBuB,OAGjEC,GAAoBtO,KAAkC1F,GAAUA,EAAOyF,UAAqD,SAAzCzF,EAAOiT,aAAa,kBAC7G,GAAIjT,GAAUA,EAAOiU,aAAa,cAAgBD,EAEhD,OAAOD,EAaT,GAPEA,EADgB,SAAdF,GACWE,EAAY,GAAKxF,GAAgBzE,QAEjCiK,EAAY,EAAIxF,GAAgBzE,QAAUyE,GAAgBzE,OAKrEiK,IAAc7J,EAChB,OAAQ,CAEZ,CACF,CAwGoBgK,CAhCGC,MACnB,MAAMC,EAAW7F,GAAgBzE,OAAS,EAC1C,GAAa,UAAT8J,EACF,OAAO7C,GAET,GAAa,UAAT6C,EACF,OAAO,EAET,GAAa,QAATA,EACF,OAAOQ,EAET,MAAMC,EAAWrD,GAAoB7B,QAAUyE,EAC/C,OAAIS,EAAW,GACK,IAAdA,GAAmBjO,GACb,EAENT,IAAoD,IAAjCqL,GAAoB7B,SAAkBmF,KAAKC,IAAIX,GAAQ,EACrE,EAEFQ,EAELC,EAAWD,EACTC,IAAaD,EAAW,GAAKhO,GACvB,EAENT,GAAmB2O,KAAKC,IAAIX,GAAQ,EAC/BQ,EAEF,EAEFC,CAAQ,EAEkBF,GAAgBN,GAQnD,GAPApB,GAAoB,CAClBvI,MAAO4J,EACPpB,SACAxG,UAIE5H,GAAyB,UAATsP,EAClB,IAAmB,IAAfE,EACFjD,GAAS1B,QAAQhH,MAAQQ,OACpB,CACL,MAAM3I,EAASgG,EAAeuI,GAAgBuF,IAC9CjD,GAAS1B,QAAQhH,MAAQnI,EAKX,IADAA,EAAOsO,cAAcI,QAAQ/F,GAAW2F,gBACnC3F,GAAWmB,OAAS,GACrC+G,GAAS1B,QAAQqF,kBAAkB7L,GAAWmB,OAAQ9J,EAAO8J,OAEjE,CACF,IAkBI2K,GAAuB3Q,EAAAA,aAAkB,KAC7C,IAAKlE,GACH,OAKF,MAAM8U,EAvBkCC,MAMxC,IAAqC,IAAjC3D,GAAoB7B,SAAkB8C,GAAc1D,iBAAmB0D,GAAc1D,gBAAgBzE,SAAWyE,GAAgBzE,QAAUmI,GAActJ,aAAeA,KAAe9J,EAAWsJ,GAAM2B,SAAWmI,GAAc9J,MAAM2B,QAAUmI,GAAc9J,MAAMyM,OAAM,CAACC,EAAK9F,IAAM/I,EAAemC,GAAM4G,MAAQ/I,EAAe6O,MALjTC,EAKqU7C,GAAc9J,MAL3U6J,EAKkV7J,IAJ9V2M,EAAS9O,EAAe8O,GAAU,OAClC9C,EAAShM,EAAegM,GAAU,MAGqU,CACtX,MAAM+C,EAA4B9C,GAAc1D,gBAAgByC,GAAoB7B,SACpF,GAAI4F,EACF,OAAOnG,EAAUL,IAAiBvO,GACzBgG,EAAehG,KAAYgG,EAAe+O,IAGvD,CAZoBC,IAACF,EAAQ9C,EAa7B,OAAQ,CAAC,EAS8B2C,GACvC,IAAwC,IAApCD,EAEF,YADA1D,GAAoB7B,QAAUuF,GAGhC,MAAMO,EAAYpW,EAAWsJ,GAAM,GAAKA,GAGxC,GAA+B,IAA3BoG,GAAgBzE,QAA6B,MAAbmL,GAMpC,GAAK9L,GAAWgG,QAKhB,GAAiB,MAAb8F,EAqBAjE,GAAoB7B,SAAWZ,GAAgBzE,OAAS,EAC1D2I,GAAoB,CAClBvI,MAAOqE,GAAgBzE,OAAS,IAMpC2I,GAAoB,CAClBvI,MAAO8G,GAAoB7B,cA9B7B,CACE,MAAM+F,EAAgB3G,GAAgByC,GAAoB7B,SAG1D,GAAItQ,GAAYqW,IAAwF,IAAvEtG,EAAUzG,IAAO0M,GAAO7E,EAAqBkF,EAAeL,KAC3F,OAEF,MAAMM,EAAYvG,EAAUL,IAAiB6G,GAAcpF,EAAqBoF,EAAYH,MACzE,IAAfE,EACFxB,GAAuB,CACrBC,KAAM,UAGRnB,GAAoB,CAClBvI,MAAOiL,GAIb,OA5BExB,GAAuB,CACrBC,KAAM,SAwCR,GAGD,CAEHrF,GAAgBzE,QAGhBjL,GAAmBsJ,GAAOvC,EAAuB+N,GAAwBlB,GAAqB7S,GAAW+I,GAAY9J,IAC/GwW,IAAmB/C,EAAAA,EAAAA,IAAiBgD,KACxCC,EAAAA,EAAAA,GAAOpM,GAAYmM,GACdA,GAGLb,IAAsB,IAcxB3Q,EAAAA,WAAgB,KACd2Q,IAAsB,GACrB,CAACA,KACJ,MAAMe,GAAatJ,IACbN,KAGJ+F,IAAa,GACbE,IAAiB,GACbxB,GACFA,EAAOnE,GACT,EAEIuJ,GAAcA,CAACvJ,EAAOwG,KACrB9G,KAGL+F,IAAa,GACTzB,GACFA,EAAQhE,EAAOwG,GACjB,EAEIgD,GAAcA,CAACxJ,EAAOuF,EAAUiB,EAAQiD,KAC5C,GAAI9W,GACF,GAAIsJ,GAAM2B,SAAW2H,EAAS3H,QAAU3B,GAAMyM,OAAM,CAACC,EAAK9F,IAAM8F,IAAQpD,EAAS1C,KAC/E,YAEG,GAAI5G,KAAUsJ,EACnB,OAEExB,GACFA,EAAS/D,EAAOuF,EAAUiB,EAAQiD,GAEpC1E,GAAcQ,EAAS,EAEnBmE,GAAU9R,EAAAA,QAAa,GACvB+R,GAAiB,SAAC3J,EAAOlM,GAA4D,IAApD8V,EAAU/H,UAAAjE,OAAA,QAAAsC,IAAA2B,UAAA,GAAAA,UAAA,GAAG,eAAgBgI,EAAMhI,UAAAjE,OAAA,QAAAsC,IAAA2B,UAAA,GAAAA,UAAA,GAAG,UACvE2E,EAASoD,EACTrE,EAAWzR,EACf,GAAInB,EAAU,CACZ4S,EAAWlH,MAAMC,QAAQrC,IAASA,GAAMwG,QAAU,GAOlD,MAAMwG,EAAYvG,EAAU6C,GAAUwD,GAAajF,EAAqBhQ,EAAQiV,MAC7D,IAAfE,EACF1D,EAAS/G,KAAK1K,GACM,aAAX+V,IACTtE,EAAShH,OAAO0K,EAAW,GAC3BzC,EAAS,eAEb,CACAlB,GAAgBtF,EAAOuF,GACvBiE,GAAYxJ,EAAOuF,EAAUiB,EAAQ,CACnC1S,WAEGwF,GAA0B0G,IAAUA,EAAM8J,SAAY9J,EAAM+J,UAC/DR,GAAYvJ,EAAOwG,KAEA,IAAjBjO,GAA0C,UAAjBA,GAA4BmR,GAAQzG,SAA4B,UAAjB1K,IAA6BmR,GAAQzG,UAC/G0B,GAAS1B,QAAQ+G,MAErB,EAqBMC,GAAiBA,CAACjK,EAAO2H,KAC7B,IAAKhV,EACH,OAEiB,KAAf8J,IACF8M,GAAYvJ,EAAO,eAErB,IAAIkK,EAAU5N,IACM,IAAhBA,GACiB,KAAfG,IAAmC,aAAdkL,IACvBuC,EAAUjO,GAAM2B,OAAS,IAG3BsM,GAAyB,SAAdvC,EAAuB,GAAK,EACnCuC,EAAU,IACZA,EAAU,GAERA,IAAYjO,GAAM2B,SACpBsM,GAAW,IAGfA,EAzCF,SAAuBlM,EAAO2J,GAC5B,IAAe,IAAX3J,EACF,OAAQ,EAEV,IAAI6J,EAAY7J,EAChB,OAAa,CAEX,GAAkB,SAAd2J,GAAwBE,IAAc5L,GAAM2B,QAAwB,aAAd+J,IAA2C,IAAfE,EACpF,OAAQ,EAEV,MAAM/T,EAASyI,GAAS+J,cAAe,oBAAmBuB,OAG1D,GAAK/T,GAAWA,EAAOiU,aAAa,cAAejU,EAAOyF,UAAqD,SAAzCzF,EAAOiT,aAAa,iBAGxF,OAAOc,EAFPA,GAA2B,SAAdF,EAAuB,GAAK,CAI7C,CACF,CAsBYwC,CAAcD,EAASvC,GACjC/C,GAAcsF,GACd/D,GAAS+D,EAAQ,EAEbE,GAAcpK,IAClByE,EAAYxB,SAAU,EACtBkC,GAAmB,IACfjB,GACFA,EAAclE,EAAO,GAAI,SAE3BwJ,GAAYxJ,EAAOrN,EAAW,GAAK,KAAM,QAAQ,EAE7C0X,GAAgB9O,GAASyE,IAI7B,GAHIzE,EAAM+O,WACR/O,EAAM+O,UAAUtK,IAEdA,EAAMuK,uBAGU,IAAhBjO,KAAyE,IAApD,CAAC,YAAa,cAAckG,QAAQxC,EAAM9B,OACjE0G,IAAe,GACfuB,IAAU,IAIQ,MAAhBnG,EAAMwK,OACR,OAAQxK,EAAM9B,KACZ,IAAK,OACCxK,IAAauG,IAEf+F,EAAMC,iBACNwH,GAAuB,CACrBC,KAAM,QACNC,UAAW,OACXnB,OAAQ,WACRxG,WAGJ,MACF,IAAK,MACCtM,IAAauG,IAEf+F,EAAMC,iBACNwH,GAAuB,CACrBC,KAAM,MACNC,UAAW,WACXnB,OAAQ,WACRxG,WAGJ,MACF,IAAK,SAEHA,EAAMC,iBACNwH,GAAuB,CACrBC,MA/kBK,EAglBLC,UAAW,WACXnB,OAAQ,WACRxG,UAEFsJ,GAAWtJ,GACX,MACF,IAAK,WAEHA,EAAMC,iBACNwH,GAAuB,CACrBC,KA1lBK,EA2lBLC,UAAW,OACXnB,OAAQ,WACRxG,UAEFsJ,GAAWtJ,GACX,MACF,IAAK,YAEHA,EAAMC,iBACNwH,GAAuB,CACrBC,KAAM,EACNC,UAAW,OACXnB,OAAQ,WACRxG,UAEFsJ,GAAWtJ,GACX,MACF,IAAK,UAEHA,EAAMC,iBACNwH,GAAuB,CACrBC,MAAO,EACPC,UAAW,WACXnB,OAAQ,WACRxG,UAEFsJ,GAAWtJ,GACX,MACF,IAAK,YACHiK,GAAejK,EAAO,YACtB,MACF,IAAK,aACHiK,GAAejK,EAAO,QACtB,MACF,IAAK,QACH,IAAqC,IAAjC8E,GAAoB7B,SAAkBvP,GAAW,CACnD,MAAMI,EAASuO,GAAgByC,GAAoB7B,SAC7C1J,IAAWmK,GAAoBA,EAAkB5P,GAIvD,GADAkM,EAAMC,iBACF1G,EACF,OAEFoQ,GAAe3J,EAAOlM,EAAQ,gBAG1BsE,GACFuM,GAAS1B,QAAQqF,kBAAkB3D,GAAS1B,QAAQhH,MAAM2B,OAAQ+G,GAAS1B,QAAQhH,MAAM2B,OAE7F,MAAW7E,GAA2B,KAAf0D,KAAmD,IAA9BmJ,KACtCjT,GAEFqN,EAAMC,iBAER0J,GAAe3J,EAAOvD,GAAY,eAAgB,aAEpD,MACF,IAAK,SACC/I,IAEFsM,EAAMC,iBAEND,EAAMyK,kBACNlB,GAAYvJ,EAAO,WACVhH,IAAiC,KAAfyD,IAAqB9J,GAAYsJ,GAAM2B,OAAS,KAE3EoC,EAAMC,iBAEND,EAAMyK,kBACNL,GAAYpK,IAEd,MACF,IAAK,YAEH,GAAIrN,IAAamI,GAA2B,KAAf2B,IAAqBR,GAAM2B,OAAS,EAAG,CAClE,MAAMI,GAAwB,IAAhB1B,GAAoBL,GAAM2B,OAAS,EAAItB,GAC/CiJ,EAAWtJ,GAAMwG,QACvB8C,EAAShH,OAAOP,EAAO,GACvBwL,GAAYxJ,EAAOuF,EAAU,eAAgB,CAC3CzR,OAAQmI,GAAM+B,IAElB,CACA,MACF,IAAK,SAEH,GAAIrL,IAAamI,GAA2B,KAAf2B,IAAqBR,GAAM2B,OAAS,IAAqB,IAAhBtB,GAAmB,CACvF,MAAM0B,EAAQ1B,GACRiJ,EAAWtJ,GAAMwG,QACvB8C,EAAShH,OAAOP,EAAO,GACvBwL,GAAYxJ,EAAOuF,EAAU,eAAgB,CAC3CzR,OAAQmI,GAAM+B,IAElB,EAIN,EAEI0M,GAAc1K,IAClBqF,IAAW,GACP7K,IAAgBiK,EAAYxB,SAC9BqG,GAAWtJ,EACb,EAEI2K,GAAa3K,IAEbsD,EAAkCrG,IACpC0H,GAAS1B,QAAQrM,SAGnByO,IAAW,GACXX,EAAWzB,SAAU,EACrBwB,EAAYxB,SAAU,EAClB3K,IAA+C,IAAjCwM,GAAoB7B,SAAkBvP,GACtDiW,GAAe3J,EAAOqC,GAAgByC,GAAoB7B,SAAU,QAC3D3K,GAAcS,GAA2B,KAAf0D,GACnCkN,GAAe3J,EAAOvD,GAAY,OAAQ,YACjC3D,GACTwM,GAAgBtF,EAAO/D,IAEzBsN,GAAYvJ,EAAO,QAAO,EAEtB4K,GAAoB5K,IACxB,MAAMuF,EAAWvF,EAAMM,OAAOrE,MAC1BQ,KAAe8I,IACjBJ,GAAmBI,GACnBI,IAAiB,GACbzB,GACFA,EAAclE,EAAOuF,EAAU,UAGlB,KAAbA,EACGlM,GAAqB1G,GACxB6W,GAAYxJ,EAAO,KAAM,SAG3BsJ,GAAWtJ,EACb,EAEI6K,GAAwB7K,IAC5B,MAAMhC,EAAQ8M,OAAO9K,EAAMO,cAAcwG,aAAa,sBAClDjC,GAAoB7B,UAAYjF,GAClCuI,GAAoB,CAClBvG,QACAhC,QACAwI,OAAQ,SAEZ,EAEIuE,GAAyB/K,IAC7BuG,GAAoB,CAClBvG,QACAhC,MAAO8M,OAAO9K,EAAMO,cAAcwG,aAAa,sBAC/CP,OAAQ,UAEVkD,GAAQzG,SAAU,CAAI,EAElB+H,GAAoBhL,IACxB,MAAMhC,EAAQ8M,OAAO9K,EAAMO,cAAcwG,aAAa,sBACtD4C,GAAe3J,EAAOqC,GAAgBrE,GAAQ,gBAC9C0L,GAAQzG,SAAU,CAAK,EAEnBgI,GAAkBjN,GAASgC,IAC/B,MAAMuF,EAAWtJ,GAAMwG,QACvB8C,EAAShH,OAAOP,EAAO,GACvBwL,GAAYxJ,EAAOuF,EAAU,eAAgB,CAC3CzR,OAAQmI,GAAM+B,IACd,EAEEkN,GAAuBlL,IACvBN,GACF6J,GAAYvJ,EAAO,eAEnBsJ,GAAWtJ,EACb,EAIImL,GAAkBnL,IAEjBA,EAAMO,cAAc4C,SAASnD,EAAMM,SAGpCN,EAAMM,OAAOyG,aAAa,QAAU3K,GACtC4D,EAAMC,gBACR,EAIImL,GAAcpL,IAEbA,EAAMO,cAAc4C,SAASnD,EAAMM,UAGxCqE,GAAS1B,QAAQrM,QACbyE,GAAiBqJ,EAAWzB,SAAW0B,GAAS1B,QAAQoI,aAAe1G,GAAS1B,QAAQqI,iBAAmB,GAC7G3G,GAAS1B,QAAQsI,SAEnB7G,EAAWzB,SAAU,EAAK,EAEtBnG,GAAuBkD,IACtBwD,GAAgC,KAAf/G,IAAsBiD,IAC1CwL,GAAqBlL,EACvB,EAEF,IAAI9D,GAAQnD,GAAY0D,GAAWmB,OAAS,EAC5C1B,GAAQA,KAAUvJ,EAAWsJ,GAAM2B,OAAS,EAAc,OAAV3B,IAChD,IAAIS,GAAiB2F,GACrB,GAAIrI,EAAS,CAEK,IAAIwR,IAEpB9O,GAAiB2F,GAAgBoJ,QAAO,CAACC,EAAK5X,EAAQkK,KACpD,MAAMY,EAAQ5E,EAAQlG,GAkBtB,OAjBI4X,EAAI9N,OAAS,GAAK8N,EAAIA,EAAI9N,OAAS,GAAGgB,QAAUA,EAClD8M,EAAIA,EAAI9N,OAAS,GAAGiC,QAAQrB,KAAK1K,GASjC4X,EAAIlN,KAAK,CACPN,IAAKF,EACLA,QACAY,QACAiB,QAAS,CAAC/L,KAGP4X,CAAG,GACT,GACL,CAIA,OAHIlI,GAAgBnH,IAClBsO,KAEK,CACLlP,aAAc,eAACF,EAAKsG,UAAAjE,OAAA,QAAAsC,IAAA2B,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKrO,EAAAA,EAAAA,GAAS,CACrC,YAAa0S,GAAoB,GAAE9J,YAAe,MACjDb,EAAO,CACR+O,UAAWD,GAAc9O,GACzBsB,YAAasO,GACb9K,QAAS+K,IACT,EACFzP,mBAAoBA,KAAA,CAClBS,GAAK,GAAEA,UACPuP,QAASvP,IAEXV,cAAeA,KAAA,CACbU,KACAH,MAAOQ,GACPmP,OAAQjB,GACRkB,QAASnB,GACT3G,SAAU6G,GACV/N,YAAaC,GAGb,wBAAyBpJ,GAAY,GAAK,KAC1C,oBAAqB0E,EAAe,OAAS,OAC7C,gBAAiB8N,GAAoB,GAAE9J,iBAAe8D,EACtD,gBAAiBgG,GAGjB9N,aAAc,MACdN,IAAK6M,GACLmH,eAAgB,OAChBC,WAAY,QACZtM,KAAM,WACNlG,SAAUiK,IAEZ3H,cAAeA,KAAA,CACbmQ,UAAW,EACXC,KAAM,SACN5L,QAAS+J,KAEXxO,uBAAwBA,KAAA,CACtBoQ,UAAW,EACXC,KAAM,SACN5L,QAAS6K,KAEXpP,YAAa9G,IAAA,IAAC,MACZgJ,GACDhJ,EAAA,OAAKxB,EAAAA,EAAAA,GAAS,CACb0K,IAAKF,EACL,iBAAkBA,EAClBgO,UAAW,IACTlR,GAAY,CACdoR,SAAUjB,GAAgBjN,IAC1B,EACFjC,gBAAiBA,KAAA,CACf0D,KAAM,UACNrD,GAAK,GAAEA,YACP,kBAAoB,GAAEA,UACtBtE,IAAKqR,GACLtM,YAAamD,IAEXA,EAAMC,gBAAgB,IAG1BjE,eAAgBzG,IAGV,IAHW,MACfyI,EAAK,OACLlK,GACDyB,EACC,IAAI4W,EACJ,MAAMhV,GAAYxE,EAAWsJ,GAAQ,CAACA,KAAQ4J,MAAKC,GAAoB,MAAVA,GAAkBhC,EAAqBhQ,EAAQgS,KACtGvM,IAAWmK,GAAoBA,EAAkB5P,GACvD,MAAO,CACLoK,IAA+E,OAAzEiO,EAAgC,MAAhBxI,OAAuB,EAASA,EAAa7P,IAAmBqY,EAAgBrS,EAAehG,GACrHkY,UAAW,EACXvM,KAAM,SACNrD,GAAK,GAAEA,YAAa4B,IACpBoO,YAAavB,GACbxK,QAAS2K,GACTqB,aAActB,GACd,oBAAqB/M,EACrB,gBAAiBzE,EACjB,gBAAiBpC,EAClB,EAEHiF,KACAK,cACAR,SACAC,SACAC,SAAUzI,IAAa6I,GACvB7I,aACA2I,QAASA,KAA2B,IAAhBC,GACpBC,YACAC,eACAF,cACAI,kBAEJ,C,kDC/9BA,MAOA,EAPyBT,IACvB,MAAMnE,EAAMF,EAAAA,OAAa,CAAC,GAI1B,OAHAA,EAAAA,WAAgB,KACdE,EAAImL,QAAUhH,CAAK,IAEdnE,EAAImL,OAAO,C","sources":["../node_modules/@mui/material/Autocomplete/autocompleteClasses.js","../node_modules/@mui/material/Autocomplete/Autocomplete.js","../node_modules/@mui/material/ListSubheader/listSubheaderClasses.js","../node_modules/@mui/material/ListSubheader/ListSubheader.js","../node_modules/@mui/material/useAutocomplete/useAutocomplete.js","../node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'expanded', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionKey\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"],\n  _excluded2 = [\"ref\"],\n  _excluded3 = [\"key\"],\n  _excluded4 = [\"key\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport { styled } from '../zero-styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }, {\n    props: {\n      multiple: true\n    },\n    style: {\n      [`& .${autocompleteClasses.inputRoot}`]: {\n        flexWrap: 'wrap'\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  variants: [{\n    props: {\n      disablePortal: true\n    },\n    style: {\n      position: 'absolute'\n    }\n  }]\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps,\n      className,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"small\"\n      })),\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      componentsProps = {},\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => `+${more}`,\n      getOptionLabel: getOptionLabelProp,\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      includeInputInList = false,\n      limitTags = -1,\n      ListboxComponent = 'ul',\n      ListboxProps,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      openOnFocus = false,\n      openText = 'Open',\n      PaperComponent = Paper,\n      PopperComponent = Popper,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium',\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: externalListboxRef\n  } = ListboxProps != null ? ListboxProps : {};\n  const _getListboxProps = getListboxProps(),\n    {\n      ref: listboxRef\n    } = _getListboxProps,\n    otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2);\n  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);\n  const defaultGetOptionLabel = option => {\n    var _option$label;\n    return (_option$label = option.label) != null ? _option$label : option;\n  };\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => {\n        const _getCustomizedTagProp = getCustomizedTagProps({\n            index\n          }),\n          {\n            key\n          } = _getCustomizedTagProp,\n          customTagProps = _objectWithoutPropertiesLoose(_getCustomizedTagProp, _excluded3);\n        return /*#__PURE__*/_jsx(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, customTagProps, ChipProps), key);\n      });\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    const {\n        key\n      } = props2,\n      otherProps = _objectWithoutPropertiesLoose(props2, _excluded4);\n    return /*#__PURE__*/_jsx(\"li\", _extends({}, otherProps, {\n      children: getOptionLabel(option)\n    }), key);\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  const renderAutocompletePopperChildren = children => /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n    as: PopperComponent,\n    disablePortal: disablePortal,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    ownerState: ownerState,\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: popupOpen\n  }, popperSlotProps, {\n    className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n    children: /*#__PURE__*/_jsx(AutocompletePaper, _extends({\n      ownerState: ownerState,\n      as: PaperComponent\n    }, paperSlotProps, {\n      className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n      children: children\n    }))\n  }));\n  let autocompletePopper = null;\n  if (groupedOptions.length > 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n      as: ListboxComponent,\n      className: classes.listbox,\n      ownerState: ownerState\n    }, otherListboxProps, ListboxProps, {\n      ref: combinedListboxRef,\n      children: groupedOptions.map((option, index) => {\n        if (groupBy) {\n          return renderGroup({\n            key: option.key,\n            group: option.group,\n            children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n          });\n        }\n        return renderListOption(option, index);\n      })\n    })));\n  } else if (loading && groupedOptions.length === 0) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteLoading, {\n      className: classes.loading,\n      ownerState: ownerState,\n      children: loadingText\n    }));\n  } else if (groupedOptions.length === 0 && !freeSolo && !loading) {\n    autocompletePopper = renderAutocompletePopperChildren( /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n      className: classes.noOptions,\n      ownerState: ownerState,\n      role: \"presentation\",\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      },\n      children: noOptionsText\n    }));\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          }\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? autocompletePopper : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListSubheaderUtilityClass(slot) {\n  return generateUtilityClass('MuiListSubheader', slot);\n}\nconst listSubheaderClasses = generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);\nexport default listSubheaderClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport capitalize from '../utils/capitalize';\nimport { getListSubheaderUtilityClass } from './listSubheaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    disableGutters,\n    inset,\n    disableSticky\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']\n  };\n  return composeClasses(slots, getListSubheaderUtilityClass, classes);\n};\nconst ListSubheaderRoot = styled('li', {\n  name: 'MuiListSubheader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box',\n  lineHeight: '48px',\n  listStyle: 'none',\n  color: (theme.vars || theme).palette.text.secondary,\n  fontFamily: theme.typography.fontFamily,\n  fontWeight: theme.typography.fontWeightMedium,\n  fontSize: theme.typography.pxToRem(14)\n}, ownerState.color === 'primary' && {\n  color: (theme.vars || theme).palette.primary.main\n}, ownerState.color === 'inherit' && {\n  color: 'inherit'\n}, !ownerState.disableGutters && {\n  paddingLeft: 16,\n  paddingRight: 16\n}, ownerState.inset && {\n  paddingLeft: 72\n}, !ownerState.disableSticky && {\n  position: 'sticky',\n  top: 0,\n  zIndex: 1,\n  backgroundColor: (theme.vars || theme).palette.background.paper\n}));\nconst ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiListSubheader'\n  });\n  const {\n      className,\n      color = 'default',\n      component = 'li',\n      disableGutters = false,\n      disableSticky = false,\n      inset = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    disableGutters,\n    disableSticky,\n    inset\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListSubheaderRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nListSubheader.muiSkipListHighlight = true;\nprocess.env.NODE_ENV !== \"production\" ? ListSubheader.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   * @default false\n   */\n  disableSticky: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader is indented.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListSubheader;","'use client';\n\n/* eslint-disable no-constant-condition */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return findIndex(filteredOptions, option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => _extends({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      var _getOptionKey;\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;","'use client';\n\nimport * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;"],"names":["getAutocompleteUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_ClearIcon","_ArrowDropDownIcon","_excluded","_excluded2","_excluded3","_excluded4","AutocompleteRoot","styled","name","overridesResolver","props","styles","ownerState","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","autocompleteClasses","tag","capitalize","inputRoot","input","root","visibility","margin","maxWidth","paddingRight","width","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","outlinedInputClasses","right","paddingTop","paddingLeft","filledInputClasses","flexGrow","textOverflow","opacity","variants","style","multiple","flexWrap","AutocompleteEndAdornment","endAdornment","position","top","transform","AutocompleteClearIndicator","IconButton","clearIndicator","marginRight","AutocompletePopupIndicator","_ref","_extends","popupIndicator","popupOpen","popupIndicatorOpen","AutocompletePopper","Popper","option","popper","disablePortal","popperDisablePortal","_ref2","theme","zIndex","vars","modal","AutocompletePaper","Paper","paper","_ref3","typography","body1","overflow","AutocompleteLoading","loading","_ref4","color","palette","text","secondary","AutocompleteNoOptions","noOptions","_ref5","AutocompleteListbox","listbox","_ref6","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focus","primary","mainChannel","selectedOpacity","alpha","main","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","ListSubheader","groupLabel","_ref7","background","AutocompleteGroupUl","groupUl","React","inProps","ref","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","useDefaultProps","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","_jsx","ClearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","getOptionLabelProp","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","ArrowDropDownIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","other","_objectWithoutPropertiesLoose","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","expanded","id","focused","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","useAutocomplete","componentName","onMouseDown","handleInputMouseDown","externalListboxRef","_getListboxProps","listboxRef","otherListboxProps","combinedListboxRef","useForkRef","_option$label","label","classes","slots","composeClasses","useUtilityClasses","startAdornment","length","getCustomizedTagProps","params","map","index","_getCustomizedTagProp","key","customTagProps","Chip","Array","isArray","splice","push","children","_jsxs","component","group","defaultRenderOption","props2","otherProps","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","renderAutocompletePopperChildren","as","clientWidth","role","open","clsx","autocompletePopper","options","option2","index2","event","preventDefault","undefined","InputLabelProps","InputProps","onClick","target","currentTarget","title","inputProps","getListSubheaderUtilityClass","ListSubheaderRoot","disableGutters","gutters","inset","disableSticky","sticky","lineHeight","fontFamily","fontWeight","fontWeightMedium","pxToRem","muiSkipListHighlight","stripDiacritics","string","normalize","replace","createFilterOptions","config","arguments","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","toLowerCase","filteredOptions","filter","candidate","indexOf","slice","findIndex","array","comp","i","defaultFilterOptions","defaultIsActiveElementInListbox","_listboxRef$current$p","current","parentElement","contains","document","activeElement","unstable_isActiveElementInListbox","unstable_classNamePrefix","disabledProp","filterOptions","getOptionDisabled","getOptionKey","idProp","inputValueProp","isOptionEqualToValue","onChange","onClose","onHighlightChange","onInputChange","onOpen","openProp","valueProp","useId","optionLabel","String","ignoreFocus","firstFocus","inputRef","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","useControlled","controlled","default","setInputValueState","state","setFocused","resetInputValue","newValue","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","some","value2","previousProps","usePreviousProps","valueChange","listboxAvailable","focusTag","useEventCallback","tagToFocus","querySelector","setHighlightedIndex","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","getAttribute","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","hasAttribute","validOptionIndex","getNextIndex","maxIndex","newIndex","Math","abs","setSelectionRange","syncHighlightedIndex","previousHighlightedOptionIndex","getPreviousHighlightedOptionIndex","every","val","value1","previousHighlightedOption","isSameValue","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","onKeyDown","defaultMuiPrevented","which","stopPropagation","handleFocus","handleBlur","handleInputChange","handleOptionMouseMove","Number","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","Map","reduce","acc","htmlFor","onBlur","onFocus","autoCapitalize","spellCheck","tabIndex","type","onDelete","_getOptionKey","onMouseMove","onTouchStart"],"sourceRoot":""}